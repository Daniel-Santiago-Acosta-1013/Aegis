#!/usr/bin/env python3
"""
Punto de entrada principal para Aegis Pentest Automation
"""

import sys
import argparse
import asyncio
from pathlib import Path

from PyQt6.QtWidgets import QApplication
from aegis_pentest.gui.main_window import AegisMainWindow
from aegis_pentest.core.scanner import AegisScanner
from aegis_pentest.utils.config import Config
from aegis_pentest.utils.helpers import setup_logging


def create_parser():
    """Crea el parser de argumentos de línea de comandos"""
    parser = argparse.ArgumentParser(
        description="Aegis - Automatización de Pentesting Web",
        prog="aegis-pentest"
    )
    
    # Modo de operación
    parser.add_argument(
        "--gui", 
        action="store_true", 
        default=True,
        help="Ejecutar en modo GUI (por defecto)"
    )
    
    parser.add_argument(
        "--cli", 
        action="store_true",
        help="Ejecutar en modo línea de comandos"
    )
    
    # Comandos CLI
    subparsers = parser.add_subparsers(dest="command", help="Comandos disponibles")
    
    # Comando scan
    scan_parser = subparsers.add_parser("scan", help="Realizar escaneo básico")
    scan_parser.add_argument("--target", required=True, help="Objetivo a escanear")
    scan_parser.add_argument("--ports", default="1-1000", help="Rango de puertos")
    scan_parser.add_argument("--output", help="Archivo de salida")
    
    # Comando full-audit
    audit_parser = subparsers.add_parser("full-audit", help="Auditoría completa")
    audit_parser.add_argument("--target", required=True, help="Objetivo a escanear")
    audit_parser.add_argument("--output", help="Archivo de salida")
    audit_parser.add_argument("--threads", type=int, default=4, help="Número de hilos")
    
    # Comando list-tools
    subparsers.add_parser("list-tools", help="Listar herramientas disponibles")
    
    # Configuración
    parser.add_argument(
        "--config", 
        help="Archivo de configuración personalizado"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="Salida detallada"
    )
    
    return parser


async def run_cli_scan(target, ports="1-1000", output=None, verbose=False):
    """Ejecuta un escaneo básico desde CLI"""
    config = Config()
    scanner = AegisScanner(config)
    
    print(f"[+] Iniciando escaneo de {target}")
    print(f"[+] Puertos: {ports}")
    
    results = await scanner.basic_scan(target, ports)
    
    if output:
        scanner.save_results(results, output)
        print(f"[+] Resultados guardados en: {output}")
    else:
        scanner.print_results(results)


async def run_cli_audit(target, output=None, threads=4, verbose=False):
    """Ejecuta una auditoría completa desde CLI"""
    config = Config()
    scanner = AegisScanner(config)
    
    print(f"[+] Iniciando auditoría completa de {target}")
    print(f"[+] Hilos: {threads}")
    
    results = await scanner.full_audit(target, threads)
    
    if output:
        scanner.save_results(results, output)
        print(f"[+] Resultados guardados en: {output}")
    else:
        scanner.print_results(results)


def list_tools():
    """Lista las herramientas disponibles"""
    config = Config()
    tools = config.get_available_tools()
    
    print("\n=== Herramientas Disponibles ===")
    for category, tool_list in tools.items():
        print(f"\n{category.upper()}:")
        for tool in tool_list:
            status = "✓" if tool["available"] else "✗"
            print(f"  {status} {tool['name']}: {tool['description']}")


def run_gui():
    """Ejecuta la interfaz gráfica"""
    app = QApplication(sys.argv)
    
    # Configurar estilo de la aplicación
    app.setStyle("Fusion")
    app.setApplicationName("Aegis Pentest Automation")
    app.setApplicationVersion("1.0.0")
    app.setOrganizationName("Aegis Security")
    
    # Crear y mostrar ventana principal
    window = AegisMainWindow()
    window.show()
    
    return app.exec()


async def main():
    """Función principal"""
    parser = create_parser()
    args = parser.parse_args()
    
    # Configurar logging
    setup_logging(verbose=args.verbose)
    
    # Cargar configuración
    config_path = args.config if args.config else None
    Config.load(config_path)
    
    # Determinar modo de ejecución
    if args.cli or args.command:
        # Modo CLI
        try:
            if args.command == "scan":
                await run_cli_scan(
                    args.target, 
                    args.ports, 
                    args.output, 
                    args.verbose
                )
            elif args.command == "full-audit":
                await run_cli_audit(
                    args.target, 
                    args.output, 
                    args.threads, 
                    args.verbose
                )
            elif args.command == "list-tools":
                list_tools()
            else:
                parser.print_help()
                return 1
            return 0
        except Exception as e:
            print(f"[ERROR] {e}")
            return 1
    else:
        # Modo GUI (por defecto)
        return run_gui()


def main_sync():
    """Wrapper síncrono para Poetry scripts"""
    if len(sys.argv) > 1 and any(cmd in sys.argv for cmd in ["scan", "full-audit", "list-tools"]):
        # Ejecutar comandos async
        return asyncio.run(main())
    else:
        # Ejecutar GUI
        return run_gui()


if __name__ == "__main__":
    sys.exit(main_sync()) 