"""
Generador de reportes para Aegis Pentest Automation
"""

import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional

from aegis_pentest.core.scanner import ScanResult
from aegis_pentest.utils.config import Config
from aegis_pentest.utils.helpers import sanitize_filename


class ReportGenerator:
    """Generador de reportes en m√∫ltiples formatos"""
    
    def __init__(self, config: Config):
        self.config = config
        self.templates_dir = Path(__file__).parent.parent / "templates"
    
    def generate_html_report(self, scan_result: ScanResult, output_path: str = None) -> str:
        """
        Genera un reporte HTML del escaneo
        
        Args:
            scan_result: Resultado del escaneo
            output_path: Ruta de salida (opcional)
            
        Returns:
            str: Ruta del archivo generado
        """
        if not output_path:
            filename = f"aegis_report_{scan_result.target}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
            output_path = self.config.reports_dir / sanitize_filename(filename)
        
        # Template HTML b√°sico
        html_content = self._generate_html_content(scan_result)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return str(output_path)
    
    def generate_json_report(self, scan_result: ScanResult, output_path: str = None) -> str:
        """Genera un reporte JSON del escaneo"""
        if not output_path:
            filename = f"aegis_report_{scan_result.target}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            output_path = self.config.reports_dir / sanitize_filename(filename)
        
        # Convertir a diccionario serializable
        report_data = {
            "report_meta": {
                "generator": "Aegis Pentest Automation",
                "version": "1.0.0",
                "generated_at": datetime.now().isoformat(),
                "target": scan_result.target,
                "scan_type": scan_result.scan_type
            },
            "scan_summary": {
                "status": scan_result.status,
                "start_time": scan_result.start_time.isoformat(),
                "end_time": scan_result.end_time.isoformat() if scan_result.end_time else None,
                "duration": scan_result.duration,
                "open_ports_count": len(scan_result.open_ports),
                "services_count": len(scan_result.services),
                "vulnerabilities_count": len(scan_result.vulnerabilities)
            },
            "scan_results": {
                "nmap_results": self._serialize_nmap_results(scan_result.nmap_results),
                "nuclei_results": scan_result.nuclei_results,
                "gobuster_results": scan_result.gobuster_results,
                "nikto_results": scan_result.nikto_results,
                "sqlmap_results": scan_result.sqlmap_results
            },
            "errors": scan_result.errors,
            "metadata": scan_result.metadata
        }
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        return str(output_path)
    
    def _generate_html_content(self, scan_result: ScanResult) -> str:
        """Genera el contenido HTML del reporte"""
        html = f"""
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reporte Aegis - {scan_result.target}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .header {{ text-align: center; border-bottom: 2px solid #3498db; padding-bottom: 20px; margin-bottom: 30px; }}
        .header h1 {{ color: #2c3e50; margin: 0; }}
        .header .subtitle {{ color: #7f8c8d; margin-top: 10px; }}
        .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }}
        .summary-card {{ background: #ecf0f1; padding: 15px; border-radius: 5px; text-align: center; }}
        .summary-card h3 {{ margin: 0 0 10px 0; color: #2c3e50; }}
        .summary-card .value {{ font-size: 24px; font-weight: bold; color: #3498db; }}
        .section {{ margin-bottom: 30px; }}
        .section h2 {{ color: #2c3e50; border-bottom: 1px solid #bdc3c7; padding-bottom: 10px; }}
        .ports-table, .vulns-table {{ width: 100%; border-collapse: collapse; margin-top: 15px; }}
        .ports-table th, .ports-table td, .vulns-table th, .vulns-table td {{ 
            border: 1px solid #bdc3c7; padding: 8px; text-align: left; 
        }}
        .ports-table th, .vulns-table th {{ background-color: #3498db; color: white; }}
        .status-open {{ color: #27ae60; font-weight: bold; }}
        .status-closed {{ color: #e74c3c; }}
        .severity-high {{ color: #e74c3c; font-weight: bold; }}
        .severity-medium {{ color: #f39c12; font-weight: bold; }}
        .severity-low {{ color: #f1c40f; }}
        .footer {{ text-align: center; margin-top: 30px; color: #7f8c8d; font-size: 12px; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõ°Ô∏è Reporte de Pentesting Aegis</h1>
            <div class="subtitle">
                Objetivo: {scan_result.target} | 
                Tipo: {scan_result.scan_type} | 
                Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            </div>
        </div>
        
        <div class="summary">
            <div class="summary-card">
                <h3>Estado</h3>
                <div class="value">{scan_result.status.upper()}</div>
            </div>
            <div class="summary-card">
                <h3>Duraci√≥n</h3>
                <div class="value">{scan_result.duration:.1f}s</div>
            </div>
            <div class="summary-card">
                <h3>Puertos Abiertos</h3>
                <div class="value">{len(scan_result.open_ports)}</div>
            </div>
            <div class="summary-card">
                <h3>Servicios</h3>
                <div class="value">{len(scan_result.services)}</div>
            </div>
            <div class="summary-card">
                <h3>Vulnerabilidades</h3>
                <div class="value">{len(scan_result.vulnerabilities)}</div>
            </div>
        </div>
        
        {self._generate_ports_section(scan_result)}
        {self._generate_services_section(scan_result)}
        {self._generate_vulnerabilities_section(scan_result)}
        
        <div class="footer">
            Generado por Aegis Pentest Automation v1.0.0 - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        </div>
    </div>
</body>
</html>"""
        return html
    
    def _generate_ports_section(self, scan_result: ScanResult) -> str:
        """Genera la secci√≥n de puertos del reporte HTML"""
        if not scan_result.open_ports:
            return ""
        
        html = '<div class="section"><h2>Puertos Abiertos</h2>'
        html += '<table class="ports-table">'
        html += '<tr><th>Puerto</th><th>Protocolo</th><th>Estado</th><th>Servicio</th><th>Versi√≥n</th></tr>'
        
        for port in scan_result.open_ports:
            html += f"""
            <tr>
                <td>{port.get('port', 'N/A')}</td>
                <td>{port.get('protocol', 'N/A')}</td>
                <td class="status-open">{port.get('state', 'N/A')}</td>
                <td>{port.get('service', 'N/A')}</td>
                <td>{port.get('version', 'N/A')}</td>
            </tr>"""
        
        html += '</table></div>'
        return html
    
    def _generate_services_section(self, scan_result: ScanResult) -> str:
        """Genera la secci√≥n de servicios del reporte HTML"""
        if not scan_result.services:
            return ""
        
        html = '<div class="section"><h2>Servicios Detectados</h2>'
        html += '<table class="ports-table">'
        html += '<tr><th>Puerto</th><th>Servicio</th><th>Versi√≥n</th><th>Banner</th></tr>'
        
        for service in scan_result.services:
            html += f"""
            <tr>
                <td>{service.get('port', 'N/A')}</td>
                <td>{service.get('service', 'N/A')}</td>
                <td>{service.get('version', 'N/A')}</td>
                <td>{service.get('banner', 'N/A')}</td>
            </tr>"""
        
        html += '</table></div>'
        return html
    
    def _generate_vulnerabilities_section(self, scan_result: ScanResult) -> str:
        """Genera la secci√≥n de vulnerabilidades del reporte HTML"""
        if not scan_result.vulnerabilities:
            return ""
        
        html = '<div class="section"><h2>Vulnerabilidades</h2>'
        html += '<table class="vulns-table">'
        html += '<tr><th>Severidad</th><th>Tipo</th><th>Descripci√≥n</th><th>Puerto</th></tr>'
        
        for vuln in scan_result.vulnerabilities:
            severity = vuln.get('severity', 'info')
            html += f"""
            <tr>
                <td class="severity-{severity}">{severity.upper()}</td>
                <td>{vuln.get('type', 'N/A')}</td>
                <td>{vuln.get('description', 'N/A')}</td>
                <td>{vuln.get('port', 'N/A')}</td>
            </tr>"""
        
        html += '</table></div>'
        return html
    
    def _serialize_nmap_results(self, nmap_results) -> Optional[Dict]:
        """Serializa los resultados de Nmap para JSON"""
        if not nmap_results:
            return None
        
        return {
            "host": nmap_results.host,
            "state": nmap_results.state,
            "ports": nmap_results.ports,
            "services": nmap_results.services,
            "os_info": nmap_results.os_info,
            "script_results": nmap_results.script_results,
            "scan_stats": nmap_results.scan_stats
        } 