"""
Gestor de privilegios para Aegis Pentest
Maneja la elevación de permisos y verificación de privilegios de administrador
"""
import os
import sys
import subprocess
import getpass
from typing import Tuple, Optional
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm


class PrivilegeManager:
    """Gestor de privilegios de administrador"""
    
    def __init__(self, console: Optional[Console] = None):
        self.console = console or Console()
        self._sudo_password: Optional[str] = None
        self._sudo_validated = False
    
    def is_admin(self) -> bool:
        """Verifica si el proceso actual tiene privilegios de administrador"""
        try:
            # En sistemas Unix/Linux/macOS
            return os.getuid() == 0
        except AttributeError:
            # En Windows (si llegara a ser necesario)
            import ctypes
            try:
                return ctypes.windll.shell32.IsUserAnAdmin()
            except:
                return False
    
    def check_sudo_available(self) -> bool:
        """Verifica si sudo está disponible en el sistema"""
        try:
            result = subprocess.run(['which', 'sudo'], 
                                  capture_output=True, 
                                  text=True, 
                                  timeout=5)
            return result.returncode == 0
        except (subprocess.TimeoutExpired, FileNotFoundError):
            return False
    
    def validate_sudo_password(self, password: str) -> bool:
        """Valida la contraseña de sudo"""
        try:
            # Ejecutar un comando simple con sudo para validar la contraseña
            process = subprocess.Popen(
                ['sudo', '-S', 'whoami'],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            stdout, stderr = process.communicate(input=f"{password}\n", timeout=10)
            
            if process.returncode == 0:
                self._sudo_password = password
                self._sudo_validated = True
                return True
            else:
                return False
                
        except (subprocess.TimeoutExpired, Exception):
            return False
    
    def get_sudo_password(self) -> bool:
        """Solicita y valida la contraseña de sudo"""
        if self._sudo_validated:
            return True
        
        if self.is_admin():
            self._sudo_validated = True
            return True
        
        if not self.check_sudo_available():
            self.console.print(Panel(
                "[bold red]❌ Error: sudo no está disponible[/bold red]\n\n"
                "[yellow]Para usar Aegis Pentest necesitas:[/yellow]\n"
                "• Ejecutar como root/administrador, O\n"
                "• Tener sudo configurado en tu sistema\n\n"
                "[cyan]Reinicia el programa con privilegios de administrador[/cyan]",
                title="Privilegios Requeridos",
                border_style="red"
            ))
            return False
        
        self.console.print(Panel(
            "[bold yellow]🔐 Privilegios de Administrador Requeridos[/bold yellow]\n\n"
            "[cyan]Aegis Pentest necesita privilegios de administrador para:[/cyan]\n"
            "• Ejecutar escaneos SYN stealth con Nmap (-sS)\n"
            "• Detectar servicios y sistemas operativos\n"
            "• Ejecutar algunas herramientas de seguridad\n\n"
            "[yellow]Se solicitará tu contraseña para usar sudo[/yellow]",
            title="Elevación de Privilegios",
            border_style="yellow"
        ))
        
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                password = getpass.getpass("🔑 Contraseña de sudo: ")
                
                if self.validate_sudo_password(password):
                    self.console.print("[green]✓ Privilegios de administrador validados[/green]")
                    return True
                else:
                    remaining = max_attempts - attempt - 1
                    if remaining > 0:
                        self.console.print(f"[red]✗ Contraseña incorrecta. Intentos restantes: {remaining}[/red]")
                    else:
                        self.console.print("[red]✗ Máximo de intentos alcanzado[/red]")
                        
            except KeyboardInterrupt:
                self.console.print("\n[yellow]⚠️ Cancelado por el usuario[/yellow]")
                return False
            except Exception as e:
                self.console.print(f"[red]✗ Error: {str(e)}[/red]")
                return False
        
        self.console.print(Panel(
            "[bold red]❌ No se pudieron obtener privilegios de administrador[/bold red]\n\n"
            "[yellow]Opciones:[/yellow]\n"
            "• Reinicia el programa como administrador/root\n"
            "• Verifica que tu usuario esté en el grupo sudo\n"
            "• Contacta al administrador del sistema",
            title="Error de Privilegios",
            border_style="red"
        ))
        return False
    
    def needs_sudo(self, tool_name: str, command_args: list) -> bool:
        """Determina si una herramienta necesita privilegios de sudo"""
        if self.is_admin():
            return False  # Ya somos root, no necesitamos sudo
        
        # Herramientas que típicamente necesitan privilegios
        tools_needing_sudo = {
            'nmap': self._nmap_needs_sudo,
            'masscan': lambda args: True,  # masscan siempre necesita root
            'nikto': lambda args: False,   # nikto normalmente no necesita root
            'nuclei': lambda args: False,  # nuclei no necesita root
            'gobuster': lambda args: False, # gobuster no necesita root
            'sqlmap': lambda args: False,  # sqlmap no necesita root
        }
        
        checker = tools_needing_sudo.get(tool_name.lower())
        if checker:
            return checker(command_args)
        
        return False
    
    def _nmap_needs_sudo(self, args: list) -> bool:
        """Verifica si nmap necesita sudo basado en los argumentos"""
        sudo_requiring_args = [
            '-sS',  # SYN stealth scan
            '-sU',  # UDP scan
            '-O',   # OS detection
            '-A',   # Aggressive scan (incluye -O)
            '--osscan-limit',
            '--osscan-guess',
        ]
        
        args_str = ' '.join(args)
        return any(arg in args_str for arg in sudo_requiring_args)
    
    def prepare_command_with_sudo(self, command: list) -> list:
        """Prepara un comando para ejecutar con sudo si es necesario"""
        if self.is_admin():
            return command  # Ya somos root
        
        if not self._sudo_validated:
            raise RuntimeError("Privilegios sudo no validados. Ejecuta get_sudo_password() primero.")
        
        # Preparar comando con sudo
        sudo_command = ['sudo', '-S'] + command
        return sudo_command
    
    def get_sudo_input(self) -> str:
        """Obtiene la entrada de contraseña para sudo"""
        if self.is_admin() or not self._sudo_password:
            return ""
        
        return f"{self._sudo_password}\n"
    
    def show_privilege_status(self):
        """Muestra el estado actual de privilegios"""
        is_admin = self.is_admin()
        sudo_available = self.check_sudo_available()
        sudo_validated = self._sudo_validated
        
        self.console.print(Panel(
            f"[bold cyan]Estado de Privilegios[/bold cyan]\n\n"
            f"🔐 Administrador actual: [{'green' if is_admin else 'red'}]{'Sí' if is_admin else 'No'}[/]\n"
            f"⚡ Sudo disponible: [{'green' if sudo_available else 'red'}]{'Sí' if sudo_available else 'No'}[/]\n"
            f"✅ Sudo validado: [{'green' if sudo_validated else 'red'}]{'Sí' if sudo_validated else 'No'}[/]\n\n"
            f"[dim]Usuario actual: {getpass.getuser()}[/dim]",
            title="Privilegios del Sistema",
            border_style="cyan"
        ))


# Instancia global del gestor de privilegios
_global_privilege_manager: Optional[PrivilegeManager] = None


def get_privilege_manager(console: Optional[Console] = None) -> PrivilegeManager:
    """Obtiene la instancia global del gestor de privilegios"""
    global _global_privilege_manager
    if _global_privilege_manager is None:
        _global_privilege_manager = PrivilegeManager(console)
    return _global_privilege_manager


def ensure_admin_privileges(console: Optional[Console] = None) -> bool:
    """Asegura que se tengan privilegios de administrador"""
    manager = get_privilege_manager(console)
    
    if manager.is_admin():
        return True
    
    return manager.get_sudo_password() 