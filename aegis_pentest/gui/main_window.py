"""
Ventana principal de la interfaz gr√°fica de Aegis Pentest Automation
"""

from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
    QTabWidget, QTextEdit, QLineEdit, QPushButton, QLabel, 
    QProgressBar, QTableWidget, QHeaderView,
    QGroupBox, QComboBox, QCheckBox, QSpinBox, QFileDialog,
    QMessageBox, QStatusBar, QScrollArea,
    QSplitter, QTreeWidget, QTreeWidgetItem, QApplication
)
from PyQt6.QtGui import QAction, QPalette, QFont
from PyQt6.QtCore import (
    Qt, QThread, pyqtSignal, QSettings
)

from aegis_pentest.utils.config import Config
from aegis_pentest.utils.helpers import validate_target


class ScanWorker(QThread):
    """Worker thread para ejecutar escaneos sin bloquear la UI"""
    
    progress_updated = pyqtSignal(int, str)
    scan_completed = pyqtSignal(dict)
    error_occurred = pyqtSignal(str)
    
    def __init__(self, scanner, target, scan_type, options=None):
        super().__init__()
        self.scanner = scanner
        self.target = target
        self.scan_type = scan_type
        self.options = options or {}
    
    def run(self):
        """Ejecuta el escaneo en un hilo separado"""
        try:
            # Aqu√≠ implementar√≠amos la l√≥gica de escaneo
            self.progress_updated.emit(25, "Iniciando escaneo...")
            
            # Simular progreso por ahora
            import time
            for i in range(26, 101, 25):
                time.sleep(1)
                self.progress_updated.emit(i, f"Progreso: {i}%")
            
            # Resultado simulado
            result = {
                'target': self.target,
                'scan_type': self.scan_type,
                'status': 'completed',
                'findings': []
            }
            
            self.scan_completed.emit(result)
            
        except Exception as e:
            self.error_occurred.emit(str(e))


class AegisMainWindow(QMainWindow):
    """Ventana principal de la aplicaci√≥n"""
    
    def __init__(self):
        super().__init__()
        self.config = Config()
        self.scanner = None
        self.current_scan_worker = None
        
        self.init_ui()
        self.setup_theme()
        self.load_settings()
    
    def init_ui(self):
        """Inicializa la interfaz de usuario"""
        self.setWindowTitle("Aegis - Automatizaci√≥n de Pentesting Web v1.0.0")
        self.setGeometry(100, 100, 1400, 900)
        
        # Widget central
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal
        main_layout = QVBoxLayout(central_widget)
        
        # Crear menubar
        self.create_menubar()
        
        # Header con logo y t√≠tulo
        header_widget = self.create_header()
        main_layout.addWidget(header_widget)
        
        # Panel de objetivo
        target_panel = self.create_target_panel()
        main_layout.addWidget(target_panel)
        
        # Splitter para dividir la interfaz
        splitter = QSplitter(Qt.Orientation.Horizontal)
        
        # Panel izquierdo - Configuraci√≥n y herramientas
        left_panel = self.create_left_panel()
        splitter.addWidget(left_panel)
        
        # Panel derecho - Resultados
        right_panel = self.create_right_panel()
        splitter.addWidget(right_panel)
        
        # Configurar proporciones del splitter
        splitter.setSizes([420, 900])
        splitter.setHandleWidth(2)
        main_layout.addWidget(splitter)
        
        # Barra de estado
        self.create_statusbar()
    
    def create_menubar(self):
        """Crea la barra de men√∫"""
        menubar = self.menuBar()
        
        # Men√∫ Archivo
        file_menu = menubar.addMenu('&Archivo')
        
        new_project_action = QAction('&Nuevo Proyecto', self)
        new_project_action.setShortcut('Ctrl+N')
        new_project_action.triggered.connect(self.new_project)
        file_menu.addAction(new_project_action)
        
        open_project_action = QAction('&Abrir Proyecto', self)
        open_project_action.setShortcut('Ctrl+O')
        open_project_action.triggered.connect(self.open_project)
        file_menu.addAction(open_project_action)
        
        file_menu.addSeparator()
        
        export_action = QAction('&Exportar Resultados', self)
        export_action.setShortcut('Ctrl+E')
        export_action.triggered.connect(self.export_results)
        file_menu.addAction(export_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction('&Salir', self)
        exit_action.setShortcut('Ctrl+Q')
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # Men√∫ Herramientas
        tools_menu = menubar.addMenu('&Herramientas')
        
        check_tools_action = QAction('&Verificar Herramientas', self)
        check_tools_action.triggered.connect(self.check_tools)
        tools_menu.addAction(check_tools_action)
        
        tools_menu.addSeparator()
        
        config_action = QAction('&Configuraci√≥n', self)
        config_action.triggered.connect(self.open_config)
        tools_menu.addAction(config_action)
        
        # Men√∫ Ver
        view_menu = menubar.addMenu('&Ver')
        
        self.dark_mode_action = QAction('&Modo Oscuro', self)
        self.dark_mode_action.setCheckable(True)
        self.dark_mode_action.triggered.connect(self.toggle_theme)
        view_menu.addAction(self.dark_mode_action)
        
        # Detectar tema actual para establecer el checkbox
        app = QApplication.instance()
        palette = app.palette()
        is_dark_mode = palette.color(QPalette.ColorRole.Window).lightness() < 128
        self.dark_mode_action.setChecked(is_dark_mode)
        
        # Men√∫ Ayuda
        help_menu = menubar.addMenu('&Ayuda')
        
        about_action = QAction('&Acerca de', self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def create_header(self):
        """Crea el header simplificado y minimalista"""
        header_widget = QWidget()
        header_widget.setFixedHeight(60)
        header_layout = QHBoxLayout(header_widget)
        header_layout.setContentsMargins(20, 15, 20, 15)
        
        # Logo y t√≠tulo simple
        logo_label = QLabel("üõ°Ô∏è")
        logo_label.setStyleSheet("font-size: 24px; margin-right: 10px;")
        header_layout.addWidget(logo_label)
        
        # T√≠tulo principal simple
        title_label = QLabel("AEGIS")
        title_label.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        header_layout.addWidget(title_label)
        
        # Subt√≠tulo simplificado
        subtitle_label = QLabel("Automatizaci√≥n de Pentesting Web")
        subtitle_label.setFont(QFont("Arial", 10))
        subtitle_label.setStyleSheet("margin-left: 10px; opacity: 0.7;")
        header_layout.addWidget(subtitle_label)
        
        # Spacer
        header_layout.addStretch()
        
        # Solo versi√≥n
        version_label = QLabel("v1.0.0")
        version_label.setFont(QFont("Arial", 9))
        version_label.setStyleSheet("opacity: 0.6;")
        header_layout.addWidget(version_label)
        
        # Estilo simple sin gradientes ni l√≠neas
        header_widget.setStyleSheet("""
            QWidget {
                background-color: transparent;
                border: none;
            }
        """)
        
        return header_widget
    
    def create_target_panel(self):
        """Crea el panel de configuraci√≥n del objetivo simplificado"""
        # Container principal simple
        main_widget = QWidget()
        main_widget.setFixedHeight(80)
        main_layout = QVBoxLayout(main_widget)
        main_layout.setContentsMargins(20, 15, 20, 15)
        main_layout.setSpacing(10)
        
        # Header simple
        header_layout = QHBoxLayout()
        title_label = QLabel("Configuraci√≥n del Objetivo")
        title_label.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        
        # Indicador de estado simple
        self.target_status = QLabel("‚óè")
        self.target_status.setFont(QFont("Arial", 12))
        self.target_status.setStyleSheet("color: #999999;")
        self.target_status.setToolTip("Estado del objetivo")
        header_layout.addWidget(self.target_status)
        
        main_layout.addLayout(header_layout)
        
        # Input row simplificado
        input_layout = QHBoxLayout()
        input_layout.setSpacing(10)
        
        # Campo de objetivo simple
        self.target_input = QLineEdit()
        self.target_input.setPlaceholderText("Ingresa el objetivo: example.com, 192.168.1.1, http://example.com")
        self.target_input.setFixedHeight(32)
        self.target_input.setFont(QFont("Arial", 11))
        self.target_input.textChanged.connect(self.validate_target_live)
        input_layout.addWidget(self.target_input, 1)
        
        # Bot√≥n simple
        validate_btn = QPushButton("Validar")
        validate_btn.setFixedSize(80, 32)
        validate_btn.setFont(QFont("Arial", 10))
        validate_btn.clicked.connect(self.validate_target)
        input_layout.addWidget(validate_btn)
        
        main_layout.addLayout(input_layout)
        
        # Estilo simple sin bordes complejos
        main_widget.setStyleSheet("""
            QWidget {
                background-color: transparent;
                border: none;
            }
        """)
        
        return main_widget
    
    def create_left_panel(self):
        """Crea el panel izquierdo con configuraciones y scroll"""
        # Crear el widget de contenido
        content_widget = QWidget()
        layout = QVBoxLayout(content_widget)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(20)
        
        # Tabs para diferentes configuraciones con estilo minimalista
        tab_widget = QTabWidget()
        tab_widget.setStyleSheet("""
            QTabWidget::pane {
                border: none;
                background-color: transparent;
            }
            QTabBar::tab {
                min-width: 120px;
                padding: 12px 16px;
                margin-right: 4px;
                border-radius: 8px 8px 0 0;
                font-weight: 500;
            }
        """)
        
        # Tab de escaneo b√°sico
        basic_tab = self.create_basic_scan_tab()
        tab_widget.addTab(basic_tab, "üéØ Escaneo")
        
        # Tab de escaneo avanzado
        advanced_tab = self.create_advanced_scan_tab()
        tab_widget.addTab(advanced_tab, "‚öôÔ∏è Avanzado")
        
        # Tab de herramientas
        tools_tab = self.create_tools_tab()
        tab_widget.addTab(tools_tab, "üîß Herramientas")
        
        layout.addWidget(tab_widget)
        
        # Panel de estado compacto
        status_panel = self.create_status_panel()
        layout.addWidget(status_panel)
        
        # Botones de control redise√±ados
        control_panel = self.create_control_panel()
        layout.addWidget(control_panel)
        
        # Agregar espaciado final para mejorar el scroll
        layout.addSpacing(20)
        
        # Crear scroll area
        scroll_area = QScrollArea()
        scroll_area.setWidget(content_widget)
        scroll_area.setWidgetResizable(True)
        scroll_area.setFixedWidth(420)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        
        # Estilo del scroll area
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            QScrollBar:vertical {
                background-color: transparent;
                width: 8px;
                border-radius: 4px;
            }
            QScrollBar::handle:vertical {
                background-color: #555555;
                border-radius: 4px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #777777;
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                border: none;
                background: none;
            }
            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
                background: none;
            }
        """)
        
        return scroll_area
    
    def create_status_panel(self):
        """Crea un panel de estado compacto"""
        panel = QWidget()
        panel.setFixedHeight(60)
        layout = QVBoxLayout(panel)
        layout.setContentsMargins(20, 10, 20, 10)
        layout.setSpacing(8)
        
        # Label de estado
        self.status_label = QLabel("Listo para escanear")
        self.status_label.setFont(QFont("Arial", 10))
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.status_label)
        
        # Barra de progreso minimalista
        self.progress_bar = QProgressBar()
        self.progress_bar.setFixedHeight(4)
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: none;
                border-radius: 2px;
                background-color: rgba(79, 195, 247, 0.2);
            }
            QProgressBar::chunk {
                border-radius: 2px;
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                                          stop: 0 #4fc3f7, stop: 1 #29b6f6);
            }
        """)
        layout.addWidget(self.progress_bar)
        
        # Aplicar estilo al panel
        app = QApplication.instance()
        palette = app.palette()
        is_dark_mode = palette.color(QPalette.ColorRole.Window).lightness() < 128
        
        if is_dark_mode:
            panel.setStyleSheet("""
                QWidget {
                    background-color: #2d2d2d;
                    border-radius: 8px;
                    border: 1px solid #3d3d3d;
                }
                QLabel {
                    color: #ffffff;
                }
            """)
        else:
            panel.setStyleSheet("""
                QWidget {
                    background-color: #f8f9fa;
                    border-radius: 8px;
                    border: 1px solid #dee2e6;
                }
                QLabel {
                    color: #495057;
                }
            """)
        
        return panel
    
    def create_control_panel(self):
        """Crea el panel de control con botones"""
        panel = QWidget()
        panel.setFixedHeight(80)
        layout = QVBoxLayout(panel)
        layout.setContentsMargins(20, 15, 20, 15)
        layout.setSpacing(12)
        
        # Layout para botones
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(12)
        
        # Bot√≥n de inicio redise√±ado
        self.start_btn = QPushButton("Iniciar Escaneo")
        self.start_btn.setFixedHeight(45)
        self.start_btn.setFont(QFont("Arial", 11, QFont.Weight.Bold))
        self.start_btn.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #4fc3f7, stop: 1 #29b6f6);
                color: #000000;
                border: none;
                border-radius: 8px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #29b6f6, stop: 1 #0288d1);
            }
            QPushButton:pressed {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #0288d1, stop: 1 #0277bd);
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        self.start_btn.clicked.connect(self.start_scan)
        buttons_layout.addWidget(self.start_btn, 2)
        
        # Bot√≥n de detener redise√±ado
        self.stop_btn = QPushButton("Detener")
        self.stop_btn.setEnabled(False)
        self.stop_btn.setFixedHeight(45)
        self.stop_btn.setFont(QFont("Arial", 11, QFont.Weight.Bold))
        self.stop_btn.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                color: #e74c3c;
                border: 2px solid #e74c3c;
                border-radius: 8px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #e74c3c;
                color: #ffffff;
            }
            QPushButton:pressed {
                background-color: #c0392b;
                border-color: #c0392b;
            }
            QPushButton:disabled {
                background-color: transparent;
                color: #bdc3c7;
                border-color: #bdc3c7;
            }
        """)
        self.stop_btn.clicked.connect(self.stop_scan)
        buttons_layout.addWidget(self.stop_btn, 1)
        
        layout.addLayout(buttons_layout)
        
        return panel
    
    def create_basic_scan_tab(self):
        """Crea el tab de escaneo b√°sico"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(25)
        
        # Tipo de escaneo con dise√±o limpio
        scan_section = self.create_section("Tipo de Escaneo", "üéØ")
        scan_content = QWidget()
        scan_content_layout = QVBoxLayout(scan_content)
        scan_content_layout.setContentsMargins(0, 0, 0, 0)
        
        self.scan_type = QComboBox()
        self.scan_type.setFixedHeight(40)
        self.scan_type.addItems([
            "Escaneo R√°pido",
            "Escaneo Completo", 
            "Escaneo de Vulnerabilidades",
            "Escaneo Sigiloso"
        ])
        scan_content_layout.addWidget(self.scan_type)
        
        scan_section.layout().addWidget(scan_content)
        layout.addWidget(scan_section)
        
        # Configuraci√≥n de puertos
        port_section = self.create_section("Configuraci√≥n de Puertos", "üîå")
        port_content = QWidget()
        port_content_layout = QVBoxLayout(port_content)
        port_content_layout.setContentsMargins(0, 0, 0, 0)
        port_content_layout.setSpacing(12)
        
        self.port_input = QLineEdit("1-1000")
        self.port_input.setFixedHeight(40)
        self.port_input.setPlaceholderText("80,443,8080 o 1-1000")
        port_content_layout.addWidget(self.port_input)
        
        # Presets de puertos con estilo minimalista
        presets_container = QWidget()
        presets_layout = QHBoxLayout(presets_container)
        presets_layout.setContentsMargins(0, 0, 0, 0)
        presets_layout.setSpacing(8)
        
        preset_buttons = [
            ("Comunes", "80,443,8080,8443,3000,3001,5000,8000"),
            ("Web", "80,443,8080,8443,8000,8001,8888,9000"),
            ("Todos", "1-65535")
        ]
        
        for name, ports in preset_buttons:
            btn = QPushButton(name)
            btn.setFixedHeight(32)
            btn.setFont(QFont("Arial", 9))
            btn.setStyleSheet("""
                QPushButton {
                    background-color: transparent;
                    border: 1px solid #4fc3f7;
                    border-radius: 6px;
                    color: #4fc3f7;
                    font-weight: 500;
                }
                QPushButton:hover {
                    background-color: #4fc3f7;
                    color: #000000;
                }
            """)
            btn.clicked.connect(lambda checked, p=ports: self.port_input.setText(p))
            presets_layout.addWidget(btn)
        
        port_content_layout.addWidget(presets_container)
        port_section.layout().addWidget(port_content)
        layout.addWidget(port_section)
        
        # Opciones con dise√±o mejorado
        options_section = self.create_section("Opciones de Escaneo", "‚öôÔ∏è")
        options_content = QWidget()
        options_content_layout = QVBoxLayout(options_content)
        options_content_layout.setContentsMargins(0, 0, 0, 0)
        options_content_layout.setSpacing(12)
        
        # Checkboxes estilizados
        self.detect_os = QCheckBox("Detectar Sistema Operativo")
        self.detect_os.setFont(QFont("Arial", 10))
        options_content_layout.addWidget(self.detect_os)
        
        self.detect_services = QCheckBox("Detectar Servicios")
        self.detect_services.setChecked(True)
        self.detect_services.setFont(QFont("Arial", 10))
        options_content_layout.addWidget(self.detect_services)
        
        self.run_scripts = QCheckBox("Ejecutar Scripts NSE")
        self.run_scripts.setFont(QFont("Arial", 10))
        options_content_layout.addWidget(self.run_scripts)
        
        options_section.layout().addWidget(options_content)
        layout.addWidget(options_section)
        
        layout.addStretch()
        return widget
    
    def create_section(self, title, icon=""):
        """Crea una secci√≥n simplificada"""
        section = QWidget()
        section_layout = QVBoxLayout(section)
        section_layout.setContentsMargins(0, 10, 0, 10)
        section_layout.setSpacing(8)
        
        # Header simple de la secci√≥n
        title_label = QLabel(f"{icon} {title}" if icon else title)
        title_label.setFont(QFont("Arial", 11, QFont.Weight.Bold))
        section_layout.addWidget(title_label)
        
        # Estilo simple sin bordes
        section.setStyleSheet("""
            QWidget {
                background-color: transparent;
                border: none;
            }
        """)
        
        return section
    
    def create_advanced_scan_tab(self):
        """Crea el tab de escaneo avanzado"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Configuraci√≥n de threads
        thread_group = QGroupBox("Configuraci√≥n de Rendimiento")
        thread_layout = QGridLayout(thread_group)
        
        thread_layout.addWidget(QLabel("Threads:"), 0, 0)
        self.thread_spin = QSpinBox()
        self.thread_spin.setRange(1, 20)
        self.thread_spin.setValue(4)
        thread_layout.addWidget(self.thread_spin, 0, 1)
        
        thread_layout.addWidget(QLabel("Timeout (seg):"), 1, 0)
        self.timeout_spin = QSpinBox()
        self.timeout_spin.setRange(10, 3600)
        self.timeout_spin.setValue(300)
        thread_layout.addWidget(self.timeout_spin, 1, 1)
        
        layout.addWidget(thread_group)
        
        # Configuraci√≥n de output
        output_group = QGroupBox("Configuraci√≥n de Salida")
        output_layout = QVBoxLayout(output_group)
        
        output_layout.addWidget(QLabel("Directorio de reportes:"))
        output_dir_layout = QHBoxLayout()
        
        self.output_dir = QLineEdit(str(self.config.reports_dir))
        output_dir_layout.addWidget(self.output_dir)
        
        browse_btn = QPushButton("Explorar")
        browse_btn.clicked.connect(self.browse_output_dir)
        output_dir_layout.addWidget(browse_btn)
        
        output_layout.addLayout(output_dir_layout)
        
        # Formato de reporte
        output_layout.addWidget(QLabel("Formato de reporte:"))
        self.report_format = QComboBox()
        self.report_format.addItems(["HTML", "PDF", "JSON", "XML"])
        output_layout.addWidget(self.report_format)
        
        layout.addWidget(output_group)
        
        layout.addStretch()
        return widget
    
    def create_tools_tab(self):
        """Crea el tab de herramientas"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Lista de herramientas
        self.tools_tree = QTreeWidget()
        self.tools_tree.setHeaderLabels(["Herramienta", "Estado", "Versi√≥n"])
        self.tools_tree.header().setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
        
        self.populate_tools_tree()
        
        layout.addWidget(self.tools_tree)
        
        # Bot√≥n para actualizar estado
        refresh_btn = QPushButton("üîÑ Actualizar Estado")
        refresh_btn.clicked.connect(self.populate_tools_tree)
        layout.addWidget(refresh_btn)
        
        return widget
    
    def create_right_panel(self):
        """Crea el panel derecho con resultados"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(0)
        
        # Header del panel de resultados
        results_header = self.create_results_header()
        layout.addWidget(results_header)
        
        # Tabs para diferentes vistas de resultados con estilo minimalista
        self.results_tabs = QTabWidget()
        self.results_tabs.setStyleSheet("""
            QTabWidget::pane {
                border: none;
                background-color: transparent;
                margin-top: 0px;
            }
            QTabBar::tab {
                min-width: 100px;
                padding: 12px 20px;
                margin-right: 2px;
                margin-bottom: 10px;
                border-radius: 8px;
                font-weight: 500;
                font-size: 11px;
            }
            QTabBar::tab:first {
                margin-left: 0px;
            }
        """)
        
        # Tab de resumen
        summary_tab = self.create_summary_tab()
        self.results_tabs.addTab(summary_tab, "üìä Resumen")
        
        # Tab de puertos
        ports_tab = self.create_ports_tab()
        self.results_tabs.addTab(ports_tab, "üîå Puertos")
        
        # Tab de vulnerabilidades
        vulns_tab = self.create_vulnerabilities_tab()
        self.results_tabs.addTab(vulns_tab, "üö® Vulnerabilidades")
        
        # Tab de log
        log_tab = self.create_log_tab()
        self.results_tabs.addTab(log_tab, "üìù Log")
        
        layout.addWidget(self.results_tabs)
        
        return widget
    
    def create_results_header(self):
        """Crea el header del panel de resultados simplificado"""
        header = QWidget()
        header.setFixedHeight(50)
        layout = QHBoxLayout(header)
        layout.setContentsMargins(20, 10, 20, 10)
        
        # T√≠tulo simple
        title_label = QLabel("Resultados del Escaneo")
        title_label.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        layout.addWidget(title_label)
        
        # Spacer
        layout.addStretch()
        
        # Indicador de estado simple
        self.global_status = QLabel("‚óè")
        self.global_status.setFont(QFont("Arial", 14))
        self.global_status.setStyleSheet("color: #999999;")
        self.global_status.setToolTip("Estado del escaneo")
        layout.addWidget(self.global_status)
        
        # Estilo simple sin bordes
        header.setStyleSheet("""
            QWidget {
                background-color: transparent;
                border: none;
            }
        """)
        
        return header
    
    def create_summary_tab(self):
        """Crea el tab de resumen de resultados"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        
        # M√©tricas en cards modernas
        metrics_container = QWidget()
        metrics_layout = QGridLayout(metrics_container)
        metrics_layout.setSpacing(15)
        
        # Cards de m√©tricas simplificadas
        metrics_data = [
            ("Puertos encontrados", "0", "üîå", "#888888"),
            ("Puertos abiertos", "0", "‚úÖ", "#888888"),
            ("Servicios detectados", "0", "üõ†Ô∏è", "#888888"),
            ("Vulnerabilidades", "0", "üö®", "#888888")
        ]
        
        self.metric_labels = {}
        
        for i, (title, value, icon, color) in enumerate(metrics_data):
            card = self.create_metric_card(title, value, icon, color)
            self.metric_labels[title.lower().replace(' ', '_')] = card.findChild(QLabel, "value_label")
            metrics_layout.addWidget(card, i // 2, i % 2)
        
        layout.addWidget(metrics_container)
        
        # √Årea de visualizaci√≥n
        chart_section = self.create_section("Distribuci√≥n de Puertos", "üìä")
        chart_content = QWidget()
        chart_content_layout = QVBoxLayout(chart_content)
        chart_content_layout.setContentsMargins(20, 20, 20, 20)
        
        self.chart_label = QLabel("üìä Gr√°fico de resultados aparecer√° aqu√≠")
        self.chart_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.chart_label.setFont(QFont("Arial", 12))
        self.chart_label.setStyleSheet("color: #7f8c8d; font-style: italic; padding: 60px;")
        chart_content_layout.addWidget(self.chart_label)
        
        chart_section.layout().addWidget(chart_content)
        layout.addWidget(chart_section)
        
        layout.addStretch()
        return widget
    
    def create_metric_card(self, title, value, icon, color):
        """Crea una card de m√©trica simplificada"""
        card = QWidget()
        card.setFixedHeight(80)
        card_layout = QVBoxLayout(card)
        card_layout.setContentsMargins(15, 10, 15, 10)
        card_layout.setSpacing(6)
        
        # Header con icono y t√≠tulo simplificado
        header_layout = QHBoxLayout()
        header_layout.setContentsMargins(0, 0, 0, 0)
        
        icon_label = QLabel(icon)
        icon_label.setFont(QFont("Arial", 16))
        icon_label.setStyleSheet("color: #888888;")
        header_layout.addWidget(icon_label)
        
        title_label = QLabel(title)
        title_label.setFont(QFont("Arial", 9, QFont.Weight.Bold))
        title_label.setStyleSheet("color: #666666;")
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        
        card_layout.addLayout(header_layout)
        
        # Valor simple
        value_label = QLabel(value)
        value_label.setObjectName("value_label")
        value_label.setFont(QFont("Arial", 18, QFont.Weight.Bold))
        value_label.setStyleSheet("color: #555555;")
        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        card_layout.addWidget(value_label)
        
        # Estilo simple sin bordes
        card.setStyleSheet("""
            QWidget {
                background-color: transparent;
                border: none;
            }
        """)
        
        return card
    
    def create_ports_tab(self):
        """Crea el tab de puertos"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Tabla de puertos
        self.ports_table = QTableWidget()
        self.ports_table.setColumnCount(6)
        self.ports_table.setHorizontalHeaderLabels([
            "Puerto", "Protocolo", "Estado", "Servicio", "Versi√≥n", "Banner"
        ])
        
        # Configurar tabla
        header = self.ports_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(5, QHeaderView.ResizeMode.Stretch)
        
        layout.addWidget(self.ports_table)
        
        return widget
    
    def create_vulnerabilities_tab(self):
        """Crea el tab de vulnerabilidades"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Tabla de vulnerabilidades
        self.vulns_table = QTableWidget()
        self.vulns_table.setColumnCount(5)
        self.vulns_table.setHorizontalHeaderLabels([
            "Severidad", "CVE", "Puerto", "Descripci√≥n", "Soluci√≥n"
        ])
        
        # Configurar tabla
        header = self.vulns_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.Stretch)
        
        layout.addWidget(self.vulns_table)
        
        return widget
    
    def create_log_tab(self):
        """Crea el tab de log"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # √Årea de texto para logs
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setStyleSheet("""
            QTextEdit {
                background-color: #2c3e50;
                color: #ecf0f1;
                font-family: 'Courier New', monospace;
                font-size: 11px;
            }
        """)
        
        layout.addWidget(self.log_text)
        
        return widget
    
    def create_statusbar(self):
        """Crea la barra de estado"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        # Labels permanentes
        self.status_bar.showMessage("Listo")
        
        # Indicador de conexi√≥n
        self.connection_label = QLabel("üî¥ Desconectado")
        self.status_bar.addPermanentWidget(self.connection_label)
    
    def setup_theme(self):
        """Configura el tema de la aplicaci√≥n detectando el modo del sistema"""
        # Detectar si el sistema est√° en modo oscuro
        app = QApplication.instance()
        palette = app.palette()
        is_dark_mode = palette.color(QPalette.ColorRole.Window).lightness() < 128
        
        if is_dark_mode:
            self.apply_dark_theme()
        else:
            self.apply_light_theme()
    
    def apply_dark_theme(self):
        """Aplica el tema oscuro simplificado y minimalista"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #1e1e1e;
                color: #e0e0e0;
            }
            
            QWidget {
                background-color: #1e1e1e;
                color: #e0e0e0;
                border: none;
            }
            
            QGroupBox {
                font-weight: 500;
                border: none;
                border-radius: 6px;
                margin-top: 8px;
                padding-top: 20px;
                background-color: #2a2a2a;
                color: #e0e0e0;
            }
            
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 12px;
                padding: 0 6px;
                color: #f0f0f0;
                font-weight: 500;
                font-size: 13px;
            }
            
            QTabWidget::pane {
                border: none;
                border-radius: 6px;
                background-color: #2a2a2a;
            }
            
            QTabBar::tab {
                background-color: #2a2a2a;
                color: #a0a0a0;
                padding: 10px 18px;
                border: none;
                border-radius: 4px 4px 0 0;
                margin-right: 1px;
                font-size: 12px;
            }
            
            QTabBar::tab:selected {
                background-color: #3a3a3a;
                color: #ffffff;
                font-weight: 500;
            }
            
            QTabBar::tab:hover {
                background-color: #333333;
                color: #f0f0f0;
            }
            
            QPushButton {
                background-color: #404040;
                color: #ffffff;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: 500;
                font-size: 12px;
            }
            
            QPushButton:hover {
                background-color: #505050;
            }
            
            QPushButton:pressed {
                background-color: #606060;
            }
            
            QPushButton:disabled {
                background-color: #333333;
                color: #666666;
            }
            
            QPushButton#primary_button {
                background-color: #5a5a5a;
                color: #ffffff;
            }
            
            QPushButton#primary_button:hover {
                background-color: #6a6a6a;
            }
            
            QLineEdit {
                background-color: #2a2a2a;
                border: 1px solid #404040;
                border-radius: 4px;
                padding: 6px 10px;
                color: #e0e0e0;
                font-size: 12px;
            }
            
            QLineEdit:focus {
                border-color: #606060;
                background-color: #2f2f2f;
            }
            
            QComboBox {
                background-color: #2a2a2a;
                border: 1px solid #404040;
                border-radius: 4px;
                padding: 6px 10px;
                color: #e0e0e0;
                font-size: 12px;
            }
            
            QComboBox:hover {
                border-color: #606060;
            }
            
            QComboBox::drop-down {
                border: none;
                width: 16px;
            }
            
            QComboBox::down-arrow {
                border: none;
                width: 0;
                height: 0;
                border-left: 4px solid transparent;
                border-right: 4px solid transparent;
                border-top: 4px solid #a0a0a0;
            }
            
            QCheckBox {
                color: #e0e0e0;
                font-size: 12px;
                spacing: 6px;
            }
            
            QCheckBox::indicator {
                width: 14px;
                height: 14px;
                border: 1px solid #606060;
                border-radius: 2px;
                background-color: #2a2a2a;
            }
            
            QCheckBox::indicator:checked {
                background-color: #606060;
                border-color: #606060;
            }
            
            QSpinBox {
                background-color: #2a2a2a;
                border: 1px solid #404040;
                border-radius: 4px;
                padding: 4px;
                color: #e0e0e0;
                font-size: 12px;
            }
            
            QSpinBox:focus {
                border-color: #606060;
            }
            
            QTableWidget {
                gridline-color: #404040;
                background-color: #2a2a2a;
                border: none;
                border-radius: 4px;
                color: #e0e0e0;
                selection-background-color: #404040;
            }
            
            QTableWidget::item {
                padding: 6px;
                border: none;
            }
            
            QTableWidget::item:selected {
                background-color: #404040;
                color: #ffffff;
            }
            
            QHeaderView::section {
                background-color: #333333;
                color: #f0f0f0;
                padding: 6px;
                border: none;
                font-weight: 500;
                font-size: 11px;
            }
            
            QTreeWidget {
                background-color: #2a2a2a;
                border: none;
                border-radius: 4px;
                color: #e0e0e0;
                selection-background-color: #404040;
            }
            
            QTreeWidget::item {
                padding: 4px;
                border: none;
            }
            
            QTreeWidget::item:selected {
                background-color: #404040;
                color: #ffffff;
            }
            
            QTreeWidget::item:hover {
                background-color: #333333;
            }
            
            QTextEdit {
                background-color: #1e1e1e;
                border: 1px solid #404040;
                border-radius: 4px;
                color: #e0e0e0;
                font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
                font-size: 11px;
                padding: 6px;
                selection-background-color: #404040;
            }
            
            QProgressBar {
                border: none;
                border-radius: 4px;
                background-color: #333333;
                text-align: center;
                color: #e0e0e0;
                font-weight: 500;
                font-size: 11px;
            }
            
            QProgressBar::chunk {
                background-color: #606060;
                border-radius: 4px;
            }
            
            QLabel {
                color: #e0e0e0;
                font-size: 12px;
                border: none;
            }
            
            QSplitter::handle {
                background-color: #333333;
                width: 1px;
            }
            
            QSplitter::handle:hover {
                background-color: #505050;
            }
            
            QStatusBar {
                background-color: #2a2a2a;
                border: none;
                color: #a0a0a0;
                font-size: 11px;
            }
            
            QMenuBar {
                background-color: #2a2a2a;
                border: none;
                color: #e0e0e0;
                font-size: 12px;
            }
            
            QMenuBar::item {
                background-color: transparent;
                padding: 6px 12px;
                border-radius: 4px;
            }
            
            QMenuBar::item:selected {
                background-color: #404040;
                color: #ffffff;
            }
            
            QMenu {
                background-color: #2a2a2a;
                border: 1px solid #404040;
                color: #e0e0e0;
                border-radius: 4px;
            }
            
            QMenu::item {
                padding: 6px 12px;
                border-radius: 2px;
                margin: 1px;
            }
            
            QMenu::item:selected {
                background-color: #404040;
                color: #ffffff;
            }
        """)
    
    def apply_light_theme(self):
        """Aplica el tema claro simplificado y minimalista"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #fafafa;
                color: #2e2e2e;
            }
            
            QWidget {
                background-color: #fafafa;
                color: #2e2e2e;
                border: none;
            }
            
            QGroupBox {
                font-weight: 500;
                border: none;
                border-radius: 6px;
                margin-top: 8px;
                padding-top: 20px;
                background-color: #ffffff;
                color: #2e2e2e;
            }
            
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 12px;
                padding: 0 6px;
                color: #1a1a1a;
                font-weight: 500;
                font-size: 13px;
            }
            
            QTabWidget::pane {
                border: none;
                border-radius: 6px;
                background-color: #ffffff;
            }
            
            QTabBar::tab {
                background-color: #f5f5f5;
                color: #666666;
                padding: 10px 18px;
                border: none;
                border-radius: 4px 4px 0 0;
                margin-right: 1px;
                font-size: 12px;
            }
            
            QTabBar::tab:selected {
                background-color: #e8e8e8;
                color: #1a1a1a;
                font-weight: 500;
            }
            
            QTabBar::tab:hover {
                background-color: #eeeeee;
                color: #2e2e2e;
            }
            
            QPushButton {
                background-color: #e0e0e0;
                color: #2e2e2e;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: 500;
                font-size: 12px;
            }
            
            QPushButton:hover {
                background-color: #d0d0d0;
            }
            
            QPushButton:pressed {
                background-color: #c0c0c0;
            }
            
            QPushButton:disabled {
                background-color: #f0f0f0;
                color: #a0a0a0;
            }
            
            QPushButton#primary_button {
                background-color: #b0b0b0;
                color: #ffffff;
            }
            
            QPushButton#primary_button:hover {
                background-color: #a0a0a0;
            }
            
            QLineEdit {
                background-color: #ffffff;
                border: 1px solid #d0d0d0;
                border-radius: 4px;
                padding: 6px 10px;
                color: #2e2e2e;
                font-size: 12px;
            }
            
            QLineEdit:focus {
                border-color: #a0a0a0;
                background-color: #fcfcfc;
            }
            
            QComboBox {
                background-color: #ffffff;
                border: 1px solid #d0d0d0;
                border-radius: 4px;
                padding: 6px 10px;
                color: #2e2e2e;
                font-size: 12px;
            }
            
            QComboBox:hover {
                border-color: #a0a0a0;
            }
            
            QComboBox::drop-down {
                border: none;
                width: 16px;
            }
            
            QComboBox::down-arrow {
                border: none;
                width: 0;
                height: 0;
                border-left: 4px solid transparent;
                border-right: 4px solid transparent;
                border-top: 4px solid #666666;
            }
            
            QCheckBox {
                color: #2e2e2e;
                font-size: 12px;
                spacing: 6px;
            }
            
            QCheckBox::indicator {
                width: 14px;
                height: 14px;
                border: 1px solid #a0a0a0;
                border-radius: 2px;
                background-color: #ffffff;
            }
            
            QCheckBox::indicator:checked {
                background-color: #a0a0a0;
                border-color: #a0a0a0;
            }
            
            QSpinBox {
                background-color: #ffffff;
                border: 1px solid #d0d0d0;
                border-radius: 4px;
                padding: 4px;
                color: #2e2e2e;
                font-size: 12px;
            }
            
            QSpinBox:focus {
                border-color: #a0a0a0;
            }
            
            QTableWidget {
                gridline-color: #e0e0e0;
                background-color: #ffffff;
                border: none;
                border-radius: 4px;
                color: #2e2e2e;
                selection-background-color: #e8e8e8;
            }
            
            QTableWidget::item {
                padding: 6px;
                border: none;
            }
            
            QTableWidget::item:selected {
                background-color: #e8e8e8;
                color: #1a1a1a;
            }
            
            QHeaderView::section {
                background-color: #f5f5f5;
                color: #2e2e2e;
                padding: 6px;
                border: none;
                font-weight: 500;
                font-size: 11px;
            }
            
            QTreeWidget {
                background-color: #ffffff;
                border: none;
                border-radius: 4px;
                color: #2e2e2e;
                selection-background-color: #e8e8e8;
            }
            
            QTreeWidget::item {
                padding: 4px;
                border: none;
            }
            
            QTreeWidget::item:selected {
                background-color: #e8e8e8;
                color: #1a1a1a;
            }
            
            QTreeWidget::item:hover {
                background-color: #f0f0f0;
            }
            
            QTextEdit {
                background-color: #fafafa;
                border: 1px solid #d0d0d0;
                border-radius: 4px;
                color: #2e2e2e;
                font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
                font-size: 11px;
                padding: 6px;
                selection-background-color: #e8e8e8;
            }
            
            QProgressBar {
                border: none;
                border-radius: 4px;
                background-color: #f0f0f0;
                text-align: center;
                color: #2e2e2e;
                font-weight: 500;
                font-size: 11px;
            }
            
            QProgressBar::chunk {
                background-color: #a0a0a0;
                border-radius: 4px;
            }
            
            QLabel {
                color: #2e2e2e;
                font-size: 12px;
                border: none;
            }
            
            QSplitter::handle {
                background-color: #e0e0e0;
                width: 1px;
            }
            
            QSplitter::handle:hover {
                background-color: #c0c0c0;
            }
            
            QStatusBar {
                background-color: #f5f5f5;
                border: none;
                color: #666666;
                font-size: 11px;
            }
            
            QMenuBar {
                background-color: #f5f5f5;
                border: none;
                color: #2e2e2e;
                font-size: 12px;
            }
            
            QMenuBar::item {
                background-color: transparent;
                padding: 6px 12px;
                border-radius: 4px;
            }
            
            QMenuBar::item:selected {
                background-color: #e8e8e8;
                color: #1a1a1a;
            }
            
            QMenu {
                background-color: #ffffff;
                border: 1px solid #d0d0d0;
                color: #2e2e2e;
                border-radius: 4px;
            }
            
            QMenu::item {
                padding: 6px 12px;
                border-radius: 2px;
                margin: 1px;
            }
            
            QMenu::item:selected {
                background-color: #e8e8e8;
                color: #1a1a1a;
            }
        """)
    
    def populate_tools_tree(self):
        """Pobla el √°rbol de herramientas"""
        self.tools_tree.clear()
        
        available_tools = self.config.get_available_tools()
        
        for category, tools in available_tools.items():
            category_item = QTreeWidgetItem([category.replace('_', ' ').title(), "", ""])
            category_item.setExpanded(True)
            
            for tool in tools:
                status = "‚úÖ Disponible" if tool['available'] else "‚ùå No disponible"
                tool_item = QTreeWidgetItem([
                    tool['name'],
                    status,
                    "N/A"  # Versi√≥n placeholder
                ])
                category_item.addChild(tool_item)
            
            self.tools_tree.addTopLevelItem(category_item)
    
    def validate_target_live(self):
        """Validaci√≥n en vivo mientras el usuario escribe"""
        target = self.target_input.text().strip()
        
        if not target:
            self.target_status.setText("‚óè")
            self.target_status.setStyleSheet("color: #7f8c8d;")
            self.target_status.setToolTip("Ingrese un objetivo")
            self.start_btn.setEnabled(False)
            return
        
        is_valid, target_type, message = validate_target(target)
        
        if is_valid:
            self.target_status.setText("‚óè")
            self.target_status.setStyleSheet("color: #27ae60;")
            self.target_status.setToolTip(f"Objetivo v√°lido: {target_type}")
            self.start_btn.setEnabled(True)
        else:
            self.target_status.setText("‚óè")
            self.target_status.setStyleSheet("color: #e74c3c;")
            self.target_status.setToolTip(f"Objetivo inv√°lido: {message}")
            self.start_btn.setEnabled(False)
    
    def validate_target(self):
        """Valida el objetivo introducido"""
        self.validate_target_live()
    
    def start_scan(self):
        """Inicia el escaneo"""
        target = self.target_input.text().strip()
        
        if not target:
            QMessageBox.warning(self, "Error", "Por favor ingrese un objetivo")
            return
        
        # Configurar UI para escaneo activo
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        self.status_label.setText("Iniciando escaneo...")
        
        # Log inicial
        self.log_text.append(f"[INFO] Iniciando escaneo de {target}")
        
        # Crear worker para escaneo
        scan_options = {
            'scan_type': self.scan_type.currentText(),
            'ports': self.port_input.text(),
            'detect_os': self.detect_os.isChecked(),
            'detect_services': self.detect_services.isChecked(),
            'run_scripts': self.run_scripts.isChecked(),
            'threads': self.thread_spin.value(),
            'timeout': self.timeout_spin.value()
        }
        
        self.current_scan_worker = ScanWorker(
            self.scanner, target, scan_options['scan_type'], scan_options
        )
        
        # Conectar se√±ales
        self.current_scan_worker.progress_updated.connect(self.update_progress)
        self.current_scan_worker.scan_completed.connect(self.scan_completed)
        self.current_scan_worker.error_occurred.connect(self.scan_error)
        
        # Iniciar worker
        self.current_scan_worker.start()
    
    def stop_scan(self):
        """Detiene el escaneo actual"""
        if self.current_scan_worker and self.current_scan_worker.isRunning():
            self.current_scan_worker.terminate()
            self.current_scan_worker.wait()
        
        self.reset_ui_after_scan()
        self.log_text.append("[WARNING] Escaneo detenido por el usuario")
    
    def update_progress(self, percentage, message):
        """Actualiza la barra de progreso"""
        self.progress_bar.setValue(percentage)
        self.status_label.setText(message)
        self.log_text.append(f"[INFO] {message}")
    
    def scan_completed(self, results):
        """Maneja la finalizaci√≥n del escaneo"""
        self.reset_ui_after_scan()
        self.status_label.setText("Escaneo completado")
        self.log_text.append("[SUCCESS] Escaneo completado exitosamente")
        
        # Procesar y mostrar resultados
        self.display_results(results)
    
    def scan_error(self, error_message):
        """Maneja errores durante el escaneo"""
        self.reset_ui_after_scan()
        self.status_label.setText(f"Error: {error_message}")
        self.log_text.append(f"[ERROR] {error_message}")
        
        QMessageBox.critical(self, "Error de Escaneo", f"Ocurri√≥ un error: {error_message}")
    
    def reset_ui_after_scan(self):
        """Resetea la UI despu√©s del escaneo"""
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.progress_bar.setVisible(False)
        self.progress_bar.setValue(0)
    
    def display_results(self, results):
        """Muestra los resultados del escaneo"""
        # Placeholder para mostrar resultados
        self.log_text.append(f"[INFO] Resultados: {results}")
    
    def browse_output_dir(self):
        """Abre di√°logo para seleccionar directorio de salida"""
        directory = QFileDialog.getExistingDirectory(
            self, "Seleccionar Directorio de Reportes", self.output_dir.text()
        )
        if directory:
            self.output_dir.setText(directory)
    
    def new_project(self):
        """Crea un nuevo proyecto"""
        QMessageBox.information(self, "Nuevo Proyecto", "Funcionalidad en desarrollo")
    
    def open_project(self):
        """Abre un proyecto existente"""
        QMessageBox.information(self, "Abrir Proyecto", "Funcionalidad en desarrollo")
    
    def export_results(self):
        """Exporta los resultados"""
        QMessageBox.information(self, "Exportar", "Funcionalidad en desarrollo")
    
    def check_tools(self):
        """Verifica el estado de las herramientas"""
        self.populate_tools_tree()
        QMessageBox.information(self, "Verificaci√≥n", "Estado de herramientas actualizado")
    
    def open_config(self):
        """Abre la configuraci√≥n"""
        QMessageBox.information(self, "Configuraci√≥n", "Funcionalidad en desarrollo")
    
    def toggle_theme(self):
        """Cambia entre modo claro y oscuro"""
        if self.dark_mode_action.isChecked():
            self.apply_dark_theme()
            # Actualizar header
            header_widget = self.create_header()
            # Reemplazar el header existente
            main_layout = self.centralWidget().layout()
            old_header = main_layout.itemAt(0).widget()
            main_layout.removeWidget(old_header)
            old_header.deleteLater()
            main_layout.insertWidget(0, header_widget)
        else:
            self.apply_light_theme()
            # Actualizar header
            header_widget = self.create_header()
            # Reemplazar el header existente
            main_layout = self.centralWidget().layout()
            old_header = main_layout.itemAt(0).widget()
            main_layout.removeWidget(old_header)
            old_header.deleteLater()
            main_layout.insertWidget(0, header_widget)
    
    def show_about(self):
        """Muestra informaci√≥n sobre la aplicaci√≥n"""
        QMessageBox.about(self, "Acerca de Aegis", 
            "Aegis - Automatizaci√≥n de Pentesting Web v1.0.0\n\n"
            "Una herramienta de automatizaci√≥n de pentesting web que act√∫a como "
            "wrapper de las mejores herramientas de seguridad.\n\n"
            "Copyright (c) 2024 Aegis Security\n"
            "Licencia: MIT"
        )
    
    def load_settings(self):
        """Carga la configuraci√≥n de la aplicaci√≥n"""
        settings = QSettings()
        
        # Restaurar geometr√≠a de ventana
        geometry = settings.value("geometry")
        if geometry:
            self.restoreGeometry(geometry)
        
        # Restaurar directorio de salida
        output_dir = settings.value("output_dir")
        if output_dir and hasattr(self, 'output_dir'):
            self.output_dir.setText(output_dir)
    
    def save_settings(self):
        """Guarda la configuraci√≥n de la aplicaci√≥n"""
        settings = QSettings()
        settings.setValue("geometry", self.saveGeometry())
        
        if hasattr(self, 'output_dir'):
            settings.setValue("output_dir", self.output_dir.text())
    
    def closeEvent(self, event):
        """Maneja el cierre de la aplicaci√≥n"""
        # Detener escaneo activo si existe
        if self.current_scan_worker and self.current_scan_worker.isRunning():
            self.current_scan_worker.terminate()
            self.current_scan_worker.wait()
        
        # Guardar configuraci√≥n
        self.save_settings()
        
        event.accept() 