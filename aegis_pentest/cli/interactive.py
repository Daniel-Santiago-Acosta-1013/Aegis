"""
Modo interactivo avanzado para configuraciones personalizadas
"""

import inquirer
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm, IntPrompt
from rich.table import Table
from rich import box
from typing import Dict, List, Any


class InteractiveMode:
    """Modo interactivo para configuraciones avanzadas"""
    
    def __init__(self, console: Console, scanner, display):
        self.console = console
        self.scanner = scanner
        self.display = display
        self.custom_config = {}
    
    async def run(self):
        """Ejecuta el modo interactivo"""
        self.console.print(Panel(
            "[bold cyan]🎛️  MODO INTERACTIVO AVANZADO[/bold cyan]\n"
            "Configuración personalizada de escaneos",
            border_style="cyan"
        ))
        
        while True:
            choice = self._show_interactive_menu()
            
            if choice == "scan":
                await self._custom_scan_wizard()
            elif choice == "config":
                self._configuration_wizard()
            elif choice == "templates":
                self._scan_templates()
            elif choice == "export":
                self._export_config()
            elif choice == "import":
                self._import_config()
            elif choice == "back":
                break
    
    def _show_interactive_menu(self) -> str:
        """Muestra el menú interactivo"""
        questions = [
            inquirer.List(
                'action',
                message="¿Qué deseas hacer?",
                choices=[
                    ('🎯 Escaneo Personalizado', 'scan'),
                    ('⚙️ Configurar Herramientas', 'config'),
                    ('📋 Plantillas de Escaneo', 'templates'),
                    ('💾 Exportar Configuración', 'export'),
                    ('📁 Importar Configuración', 'import'),
                    ('🔙 Volver al Menú Principal', 'back')
                ]
            )
        ]
        
        answers = inquirer.prompt(questions)
        return answers['action'] if answers else 'back'
    
    async def _custom_scan_wizard(self):
        """Asistente para escaneo personalizado"""
        self.console.print(Panel(
            "[bold green]🧙‍♂️ ASISTENTE DE ESCANEO PERSONALIZADO[/bold green]",
            border_style="green"
        ))
        
        # Paso 1: Objetivo
        target = Prompt.ask("[cyan]🎯 Objetivo (IP/dominio/red)[/cyan]")
        
        # Paso 2: Tipo de escaneo
        scan_types = [
            inquirer.Checkbox(
                'scan_types',
                message="Selecciona los tipos de escaneo:",
                choices=[
                    ('📡 Descubrimiento de puertos (Nmap)', 'nmap'),
                    ('🔍 Enumeración de directorios (Gobuster)', 'gobuster'),
                    ('🚨 Detección de vulnerabilidades (Nuclei)', 'nuclei'),
                    ('🌐 Análisis web (Nikto)', 'nikto'),
                    ('💉 Inyección SQL (SQLMap)', 'sqlmap')
                ]
            )
        ]
        
        selected_scans = inquirer.prompt(scan_types)['scan_types']
        
        # Paso 3: Configuración específica por herramienta
        config = {}
        
        if 'nmap' in selected_scans:
            config['nmap'] = self._configure_nmap()
        
        if 'gobuster' in selected_scans:
            config['gobuster'] = self._configure_gobuster()
        
        if 'nuclei' in selected_scans:
            config['nuclei'] = self._configure_nuclei()
        
        if 'nikto' in selected_scans:
            config['nikto'] = self._configure_nikto()
        
        if 'sqlmap' in selected_scans:
            config['sqlmap'] = self._configure_sqlmap()
        
        # Paso 4: Configuración global
        config['global'] = self._configure_global()
        
        # Paso 5: Confirmación y ejecución
        self._show_scan_summary(target, selected_scans, config)
        
        if Confirm.ask("[yellow]¿Ejecutar este escaneo personalizado?[/yellow]"):
            await self._execute_custom_scan(target, selected_scans, config)
    
    def _configure_nmap(self) -> Dict[str, Any]:
        """Configuración específica para Nmap"""
        self.console.print("\n[bold blue]⚙️ Configuración de Nmap[/bold blue]")
        
        questions = [
            inquirer.Text('ports', message="Puertos a escanear", default="1-1000"),
            inquirer.List(
                'scan_type',
                message="Tipo de escaneo TCP:",
                choices=[
                    ('SYN Scan (-sS)', 'syn'),
                    ('Connect Scan (-sT)', 'connect'),
                    ('ACK Scan (-sA)', 'ack'),
                    ('Window Scan (-sW)', 'window')
                ]
            ),
            inquirer.List(
                'timing',
                message="Perfil de tiempo:",
                choices=[
                    ('Paranoid (T0)', '0'),
                    ('Sneaky (T1)', '1'),
                    ('Polite (T2)', '2'),
                    ('Normal (T3)', '3'),
                    ('Aggressive (T4)', '4'),
                    ('Insane (T5)', '5')
                ]
            ),
            inquirer.Confirm('detect_os', message="¿Detectar sistema operativo?", default=False),
            inquirer.Confirm('detect_version', message="¿Detectar versiones de servicios?", default=True),
            inquirer.Confirm('run_scripts', message="¿Ejecutar scripts NSE?", default=False)
        ]
        
        return inquirer.prompt(questions)
    
    def _configure_gobuster(self) -> Dict[str, Any]:
        """Configuración específica para Gobuster"""
        self.console.print("\n[bold green]⚙️ Configuración de Gobuster[/bold green]")
        
        questions = [
            inquirer.List(
                'mode',
                message="Modo de Gobuster:",
                choices=[
                    ('Directorios (dir)', 'dir'),
                    ('DNS (dns)', 'dns'),
                    ('VHost (vhost)', 'vhost')
                ]
            ),
            inquirer.Text('wordlist', message="Wordlist a usar", default="/usr/share/wordlists/dirb/common.txt"),
            inquirer.Text('extensions', message="Extensiones (separadas por coma)", default="php,html,txt,js"),
            inquirer.Text('threads', message="Número de hilos", default="10"),
            inquirer.Confirm('follow_redirects', message="¿Seguir redirecciones?", default=True)
        ]
        
        return inquirer.prompt(questions)
    
    def _configure_nuclei(self) -> Dict[str, Any]:
        """Configuración específica para Nuclei"""
        self.console.print("\n[bold red]⚙️ Configuración de Nuclei[/bold red]")
        
        questions = [
            inquirer.Checkbox(
                'templates',
                message="Selecciona las plantillas:",
                choices=[
                    ('CVEs', 'cves'),
                    ('Exposures', 'exposures'),
                    ('Technologies', 'technologies'),
                    ('Misconfiguration', 'misconfiguration'),
                    ('Vulnerabilities', 'vulnerabilities'),
                    ('Default Logins', 'default-logins')
                ]
            ),
            inquirer.List(
                'severity',
                message="Severidad mínima:",
                choices=[
                    ('Info', 'info'),
                    ('Low', 'low'),
                    ('Medium', 'medium'),
                    ('High', 'high'),
                    ('Critical', 'critical')
                ]
            ),
            inquirer.Text('concurrency', message="Concurrencia", default="25")
        ]
        
        return inquirer.prompt(questions)
    
    def _configure_nikto(self) -> Dict[str, Any]:
        """Configuración específica para Nikto"""
        self.console.print("\n[bold magenta]⚙️ Configuración de Nikto[/bold magenta]")
        
        questions = [
            inquirer.Text('port', message="Puerto web", default="80"),
            inquirer.Confirm('ssl', message="¿Usar SSL/HTTPS?", default=False),
            inquirer.Confirm('evasion', message="¿Usar técnicas de evasión?", default=False),
            inquirer.Text('tuning', message="Opciones de afinación (1-9)", default="1")
        ]
        
        return inquirer.prompt(questions)
    
    def _configure_sqlmap(self) -> Dict[str, Any]:
        """Configuración específica para SQLMap"""
        self.console.print("\n[bold yellow]⚙️ Configuración de SQLMap[/bold yellow]")
        
        questions = [
            inquirer.Text('url', message="URL objetivo"),
            inquirer.Text('data', message="Datos POST (opcional)", default=""),
            inquirer.List(
                'level',
                message="Nivel de pruebas:",
                choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5')]
            ),
            inquirer.List(
                'risk',
                message="Nivel de riesgo:",
                choices=[('1', '1'), ('2', '2'), ('3', '3')]
            ),
            inquirer.Confirm('batch', message="¿Modo automático (sin interacción)?", default=True)
        ]
        
        return inquirer.prompt(questions)
    
    def _configure_global(self) -> Dict[str, Any]:
        """Configuración global del escaneo"""
        self.console.print("\n[bold cyan]⚙️ Configuración Global[/bold cyan]")
        
        questions = [
            inquirer.Text('output_dir', message="Directorio de resultados", default="./results"),
            inquirer.Text('timeout', message="Timeout global (segundos)", default="300"),
            inquirer.Confirm('verbose', message="¿Modo verboso?", default=False),
            inquirer.Confirm('save_raw', message="¿Guardar salida cruda?", default=True)
        ]
        
        return inquirer.prompt(questions)
    
    def _show_scan_summary(self, target: str, scan_types: List[str], config: Dict[str, Any]):
        """Muestra un resumen del escaneo configurado"""
        self.console.print("\n" + "="*60)
        self.console.print(Panel(
            f"[bold green]📋 RESUMEN DEL ESCANEO PERSONALIZADO[/bold green]\n\n"
            f"[bold cyan]🎯 Objetivo:[/bold cyan] {target}\n"
            f"[bold cyan]🔧 Herramientas:[/bold cyan] {', '.join(scan_types).upper()}",
            border_style="green"
        ))
        
        # Tabla de configuración detallada
        summary_table = Table(title="Configuración Detallada", box=box.ROUNDED)
        summary_table.add_column("Herramienta", style="cyan", min_width=12)
        summary_table.add_column("Parámetros", style="white")
        
        for tool in scan_types:
            if tool in config:
                params = []
                for key, value in config[tool].items():
                    params.append(f"{key}: {value}")
                summary_table.add_row(tool.upper(), "\n".join(params))
        
        self.console.print(summary_table)
        self.console.print("="*60 + "\n")
    
    async def _execute_custom_scan(self, target: str, scan_types: List[str], config: Dict[str, Any]):
        """Ejecuta el escaneo personalizado"""
        self.console.print(Panel(
            "[bold green]🚀 EJECUTANDO ESCANEO PERSONALIZADO[/bold green]",
            border_style="green"
        ))
        
        # Aquí se ejecutaría el escaneo con la configuración personalizada
        # Por ahora, simulamos la ejecución
        results = {}
        
        for tool in scan_types:
            self.console.print(f"[cyan]Ejecutando {tool.upper()}...[/cyan]")
            # Simular ejecución
            results[tool] = {"status": "completed", "findings": []}
        
        self.console.print("[green]✅ Escaneo personalizado completado[/green]")
        
        # Mostrar resultados
        if results:
            self.display.show_scan_results(results)
    
    def _configuration_wizard(self):
        """Asistente de configuración de herramientas"""
        self.console.print(Panel(
            "[bold yellow]⚙️ CONFIGURACIÓN DE HERRAMIENTAS[/bold yellow]",
            border_style="yellow"
        ))
        
        # Mostrar estado actual
        self.display.show_tools_status(self.scanner.config)
        
        # Opciones de configuración
        config_choice = inquirer.prompt([
            inquirer.List(
                'config_action',
                message="¿Qué deseas configurar?",
                choices=[
                    ('🔧 Rutas de herramientas', 'paths'),
                    ('⏱️ Timeouts y límites', 'limits'),
                    ('🌐 Configuración de red', 'network'),
                    ('📁 Directorios de salida', 'output'),
                    ('🔙 Volver', 'back')
                ]
            )
        ])
        
        if config_choice and config_choice['config_action'] != 'back':
            self._handle_configuration(config_choice['config_action'])
    
    def _handle_configuration(self, config_type: str):
        """Maneja diferentes tipos de configuración"""
        if config_type == 'paths':
            self._configure_tool_paths()
        elif config_type == 'limits':
            self._configure_limits()
        elif config_type == 'network':
            self._configure_network()
        elif config_type == 'output':
            self._configure_output()
    
    def _configure_tool_paths(self):
        """Configurar rutas de herramientas"""
        tools = ['nmap', 'nuclei', 'gobuster', 'nikto', 'sqlmap']
        
        for tool in tools:
            current_path = self.scanner.config.get_tool_path(tool)
            new_path = Prompt.ask(
                f"[cyan]Ruta para {tool.upper()}[/cyan]",
                default=current_path or f"/usr/bin/{tool}"
            )
            # Aquí se actualizaría la configuración
            self.console.print(f"[green]✓[/green] {tool.upper()} configurado: {new_path}")
    
    def _configure_limits(self):
        """Configurar timeouts y límites"""
        timeout = IntPrompt.ask("[cyan]Timeout global (segundos)[/cyan]", default=300)
        threads = IntPrompt.ask("[cyan]Número máximo de hilos[/cyan]", default=10)
        retries = IntPrompt.ask("[cyan]Número de reintentos[/cyan]", default=3)
        
        self.console.print(f"[green]✓[/green] Límites configurados:")
        self.console.print(f"  - Timeout: {timeout}s")
        self.console.print(f"  - Hilos: {threads}")
        self.console.print(f"  - Reintentos: {retries}")
    
    def _configure_network(self):
        """Configurar opciones de red"""
        user_agent = Prompt.ask("[cyan]User-Agent[/cyan]", default="Aegis/1.0")
        proxy = Prompt.ask("[cyan]Proxy (opcional)[/cyan]", default="")
        rate_limit = IntPrompt.ask("[cyan]Límite de velocidad (req/s)[/cyan]", default=10)
        
        self.console.print(f"[green]✓[/green] Red configurada:")
        self.console.print(f"  - User-Agent: {user_agent}")
        self.console.print(f"  - Proxy: {proxy or 'Ninguno'}")
        self.console.print(f"  - Rate Limit: {rate_limit} req/s")
    
    def _configure_output(self):
        """Configurar directorios de salida"""
        output_dir = Prompt.ask("[cyan]Directorio base de resultados[/cyan]", default="./results")
        format_choice = inquirer.prompt([
            inquirer.Checkbox(
                'formats',
                message="Formatos de salida:",
                choices=[
                    ('JSON', 'json'),
                    ('XML', 'xml'),
                    ('HTML', 'html'),
                    ('CSV', 'csv'),
                    ('TXT', 'txt')
                ]
            )
        ])
        
        self.console.print(f"[green]✓[/green] Salida configurada:")
        self.console.print(f"  - Directorio: {output_dir}")
        self.console.print(f"  - Formatos: {', '.join(format_choice['formats'])}")
    
    def _scan_templates(self):
        """Gestión de plantillas de escaneo"""
        self.console.print(Panel(
            "[bold magenta]📋 PLANTILLAS DE ESCANEO[/bold magenta]",
            border_style="magenta"
        ))
        
        # Mostrar plantillas disponibles
        templates = {
            'web_basic': "Escaneo web básico (Nmap + Nikto)",
            'web_full': "Escaneo web completo (Todas las herramientas)",
            'network_discovery': "Descubrimiento de red (Nmap)",
            'vulnerability_scan': "Escaneo de vulnerabilidades (Nuclei)",
            'directory_enum': "Enumeración de directorios (Gobuster)"
        }
        
        template_table = Table(title="Plantillas Disponibles", box=box.ROUNDED)
        template_table.add_column("Nombre", style="cyan")
        template_table.add_column("Descripción", style="white")
        
        for name, desc in templates.items():
            template_table.add_row(name, desc)
        
        self.console.print(template_table)
    
    def _export_config(self):
        """Exportar configuración actual"""
        filename = Prompt.ask("[cyan]Nombre del archivo de configuración[/cyan]", default="aegis_config.json")
        self.console.print(f"[green]✓[/green] Configuración exportada a: {filename}")
    
    def _import_config(self):
        """Importar configuración desde archivo"""
        filename = Prompt.ask("[cyan]Archivo de configuración a importar[/cyan]")
        self.console.print(f"[green]✓[/green] Configuración importada desde: {filename}") 