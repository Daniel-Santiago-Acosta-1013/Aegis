"""
Modo interactivo simplificado para acceso directo a herramientas
"""

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm, IntPrompt
from rich.table import Table
from rich import box
from rich.progress import Progress, SpinnerColumn, TextColumn


from aegis_pentest.tools import (
    NmapWrapper, NucleiWrapper, GobusterWrapper, NiktoWrapper, 
    SqlMapWrapper, SSLAnalyzer, FfufWrapper, ZapWrapper,
    ShodanWrapper, TracerouteWrapper, W3afWrapper, CensysWrapper
)
from aegis_pentest.utils.logger import get_logger


class InteractiveMode:
    """Modo interactivo simplificado para acceso directo a herramientas"""
    
    def __init__(self, console: Console, scanner, display):
        self.console = console
        self.scanner = scanner
        self.display = display
        self.logger = get_logger(console)
        
        # Inicializar herramientas disponibles
        self.tools = {
            'nmap': {'wrapper': NmapWrapper, 'name': 'Nmap', 'desc': 'Escaneo de puertos y servicios'},
            'nuclei': {'wrapper': NucleiWrapper, 'name': 'Nuclei', 'desc': 'Detector de vulnerabilidades'},
            'gobuster': {'wrapper': GobusterWrapper, 'name': 'Gobuster', 'desc': 'Fuerza bruta de directorios'},
            'nikto': {'wrapper': NiktoWrapper, 'name': 'Nikto', 'desc': 'Esc√°ner web de vulnerabilidades'},
            'sqlmap': {'wrapper': SqlMapWrapper, 'name': 'SQLMap', 'desc': 'Detecci√≥n de inyecci√≥n SQL'},
            'ssl': {'wrapper': SSLAnalyzer, 'name': 'SSL Analyzer', 'desc': 'An√°lisis de certificados SSL/TLS'},
            'ffuf': {'wrapper': FfufWrapper, 'name': 'FFUF', 'desc': 'Fuzzer web r√°pido'},
            'shodan': {'wrapper': ShodanWrapper, 'name': 'Shodan', 'desc': 'Motor de b√∫squeda de dispositivos'},
            'traceroute': {'wrapper': TracerouteWrapper, 'name': 'Traceroute', 'desc': 'Rastreo de rutas de red'},
            'w3af': {'wrapper': W3afWrapper, 'name': 'W3AF', 'desc': 'Framework de auditor√≠a web'},
            'censys': {'wrapper': CensysWrapper, 'name': 'Censys', 'desc': 'Motor de b√∫squeda de internet'}
        }
    
    async def run(self):
        """Ejecuta el modo interactivo simplificado"""
        self.console.print(Panel(
            "[bold cyan]üõ†Ô∏è  MODO INTERACTIVO - HERRAMIENTAS AVANZADAS[/bold cyan]\n"
            "Acceso directo a todas las herramientas de pentesting",
            border_style="cyan"
        ))
        
        while True:
            choice = self._show_tools_menu()
            
            if choice == "back":
                break
            elif choice in self.tools:
                await self._use_tool(choice)
    
    def _show_tools_menu(self) -> str:
        """Muestra el men√∫ de herramientas disponibles"""
        table = Table(title="üõ†Ô∏è Herramientas Disponibles", box=box.ROUNDED)
        table.add_column("Opci√≥n", style="cyan", min_width=3)
        table.add_column("Herramienta", style="bold white")
        table.add_column("Descripci√≥n", style="dim white")
        table.add_column("Estado", style="green", justify="center")
        
        # Mapeo de keys a nombres de herramientas en config
        tool_config_names = {
            'nmap': 'nmap',
            'nuclei': 'nuclei', 
            'gobuster': 'gobuster',
            'nikto': 'nikto',
            'sqlmap': 'sqlmap',
            'ssl': 'openssl',  # SSL Analyzer usa OpenSSL
            'ffuf': 'ffuf',
            'shodan': 'shodan',
            'traceroute': 'traceroute',
            'w3af': 'w3af_console',
            'censys': 'censys'
        }
        
        choices = []
        for key, tool_info in self.tools.items():
            try:
                # Usar el config del scanner para verificar disponibilidad
                config_name = tool_config_names.get(key, key)
                available = self.scanner.config.is_tool_available(config_name)
                
                status = "‚úÖ Listo" if available else "‚ùå No disponible"
                table.add_row(key, tool_info['name'], tool_info['desc'], status)
                if available:
                    choices.append(key)
            except Exception as e:
                table.add_row(key, tool_info['name'], tool_info['desc'], "‚ùì Error")
                self.logger.log_tool_output("interactive", f"Error verificando {key}: {str(e)}", True)
        
        table.add_row("back", "Volver", "Regresar al men√∫ principal", "")
        choices.append("back")
        
        self.console.print(table)
        self.console.print()
        
        choice = Prompt.ask(
            "[bold yellow]Selecciona una herramienta[/bold yellow]",
            choices=choices,
            default="back"
        )
        
        return choice
    
    async def _use_tool(self, tool_key: str):
        """Usar una herramienta espec√≠fica"""
        tool_info = self.tools[tool_key]
        
        self.console.print(Panel(
            f"[bold cyan]üîß {tool_info['name']}[/bold cyan]\n"
            f"{tool_info['desc']}",
            border_style="cyan"
        ))
        
        # Llamar al m√©todo espec√≠fico para cada herramienta
        if tool_key == 'nmap':
            await self._use_nmap()
        elif tool_key == 'nuclei':
            await self._use_nuclei()
        elif tool_key == 'gobuster':
            await self._use_gobuster()
        elif tool_key == 'nikto':
            await self._use_nikto()
        elif tool_key == 'sqlmap':
            await self._use_sqlmap()
        elif tool_key == 'ssl':
            await self._use_ssl_analyzer()
        elif tool_key == 'ffuf':
            await self._use_ffuf()
        elif tool_key == 'shodan':
            await self._use_shodan()
        elif tool_key == 'traceroute':
            await self._use_traceroute()
        elif tool_key == 'w3af':
            await self._use_w3af()
        elif tool_key == 'censys':
            await self._use_censys()
    
    async def _use_nmap(self):
        """Interfaz para usar Nmap con recomendaciones"""
        nmap = NmapWrapper(self.scanner.config)
        
        # Solicitar objetivo
        target = Prompt.ask(
            "[bold cyan]üéØ Objetivo (IP/dominio/red)[/bold cyan]",
            default="scanme.nmap.org"
        )
        
        # Recomendaciones de puertos frecuentes
        self.console.print(Panel(
            "[bold yellow]üí° Puertos Frecuentes Recomendados[/bold yellow]\n\n"
            "‚Ä¢ [cyan]80,443[/cyan] - HTTP/HTTPS (Servicios web)\n"
            "‚Ä¢ [cyan]21,22[/cyan] - FTP/SSH (Servicios de transferencia)\n"
            "‚Ä¢ [cyan]25,587,993,995[/cyan] - SMTP/Email\n"
            "‚Ä¢ [cyan]53[/cyan] - DNS\n"
            "‚Ä¢ [cyan]139,445[/cyan] - SMB (Compartici√≥n Windows)\n"
            "‚Ä¢ [cyan]3389[/cyan] - RDP (Escritorio remoto)\n"
            "‚Ä¢ [cyan]1433,3306,5432[/cyan] - Bases de datos (SQL Server, MySQL, PostgreSQL)\n"
            "‚Ä¢ [cyan]8080,8443,8000[/cyan] - Servicios web alternativos\n"
            "‚Ä¢ [cyan]1-1000[/cyan] - Puertos m√°s comunes\n"
            "‚Ä¢ [cyan]1-65535[/cyan] - Escaneo completo (lento)",
            title="Recomendaciones de Puertos",
            border_style="yellow"
        ))
        
        ports = Prompt.ask(
            "[bold cyan]üîå Puertos a escanear[/bold cyan]",
            default="1-1000"
        )
        
        # Opciones avanzadas
        detect_os = Confirm.ask("[cyan]¬øDetectar sistema operativo? (-O)[/cyan]", default=False)
        detect_services = Confirm.ask("[cyan]¬øDetectar versiones de servicios? (-sV)[/cyan]", default=True)
        stealth = Confirm.ask("[cyan]¬øUsar modo sigiloso? (-sS)[/cyan]", default=True)
        
        if Confirm.ask(f"[yellow]¬øEjecutar escaneo Nmap en {target}?[/yellow]"):
            try:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=self.console
                ) as progress:
                    task = progress.add_task("Ejecutando Nmap...", total=None)
                    
                    # Ejecutar escaneo usando el m√©todo apropiado
                    if detect_os or not stealth:
                        # Usar escaneo comprensivo para detecci√≥n de OS
                        result = await nmap.comprehensive_scan(target, ports)
                    else:
                        # Usar escaneo b√°sico
                        result = await nmap.basic_scan(target, ports)
                    
                    progress.update(task, description="¬°Escaneo completado!")
                
                # Logging
                self.logger.log_tool_output("nmap", f"Escaneo de {target}:{ports} completado", False)
                
                # Mostrar resultados
                if result:
                    self.console.print(Panel(
                        f"[bold green]‚úÖ Escaneo Nmap Completado[/bold green]\n\n"
                        f"üéØ Target: [cyan]{target}[/cyan]\n"
                        f"üîå Puertos: [yellow]{ports}[/yellow]\n"
                        f"üìä Resultados guardados en logs",
                        title="Resultado",
                        border_style="green"
                    ))
                    
                    # Mostrar resultados b√°sicos
                    self.display.show_scan_results(result)
                
            except Exception as e:
                self.logger.log_tool_output("nmap", f"Error: {str(e)}", True)
                self.console.print(f"[red]‚ùå Error ejecutando Nmap: {str(e)}[/red]")
    
    async def _use_nuclei(self):
        """Interfaz para usar Nuclei"""
        nuclei = NucleiWrapper(self.scanner.config)
        
        target = Prompt.ask(
            "[bold cyan]üéØ URL objetivo[/bold cyan]",
            default="https://scanme.nmap.org"
        )
        
        # Mostrar plantillas disponibles
        self.console.print(Panel(
            "[bold yellow]üîç Tipos de Plantillas Disponibles[/bold yellow]\n\n"
            "‚Ä¢ [cyan]cves[/cyan] - Vulnerabilidades CVE conocidas\n"
            "‚Ä¢ [cyan]exposures[/cyan] - Exposiciones de informaci√≥n\n"
            "‚Ä¢ [cyan]technologies[/cyan] - Detecci√≥n de tecnolog√≠as\n"
            "‚Ä¢ [cyan]misconfigurations[/cyan] - Errores de configuraci√≥n\n"
            "‚Ä¢ [cyan]default-logins[/cyan] - Credenciales por defecto\n"
            "‚Ä¢ [cyan]vulnerabilities[/cyan] - Vulnerabilidades generales",
            title="Plantillas Nuclei",
            border_style="yellow"
        ))
        
        templates = Prompt.ask(
            "[bold cyan]üìã Plantillas (separadas por coma)[/bold cyan]",
            default="cves,exposures"
        )
        
        if Confirm.ask(f"[yellow]¬øEjecutar escaneo Nuclei en {target}?[/yellow]"):
            try:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=self.console
                ) as progress:
                    task = progress.add_task("Ejecutando Nuclei...", total=None)
                    
                    result = await nuclei.scan_with_templates(target, templates.split(','))
                    
                    progress.update(task, description="¬°Escaneo completado!")
                
                self.logger.log_tool_output("nuclei", f"Escaneo de {target} completado", False)
                
                if result:
                    self.console.print(Panel(
                        f"[bold green]‚úÖ Escaneo Nuclei Completado[/bold green]\n\n"
                        f"üéØ Target: [cyan]{target}[/cyan]\n"
                        f"üìã Plantillas: [yellow]{templates}[/yellow]\n"
                        f"üìä Resultados guardados en logs",
                        title="Resultado",
                        border_style="green"
                    ))
                
            except Exception as e:
                self.logger.log_tool_output("nuclei", f"Error: {str(e)}", True)
                self.console.print(f"[red]‚ùå Error ejecutando Nuclei: {str(e)}[/red]")
    
    async def _use_gobuster(self):
        """Interfaz para usar Gobuster"""
        gobuster = GobusterWrapper(self.scanner.config)
        
        target = Prompt.ask(
            "[bold cyan]üéØ URL objetivo[/bold cyan]",
            default="http://scanme.nmap.org"
        )
        
        # Mostrar wordlists comunes
        self.console.print(Panel(
            "[bold yellow]üìö Wordlists Recomendadas[/bold yellow]\n\n"
            "‚Ä¢ [cyan]/usr/share/wordlists/dirb/common.txt[/cyan] - Directorios comunes\n"
            "‚Ä¢ [cyan]/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt[/cyan] - Lista media\n"
            "‚Ä¢ [cyan]/usr/share/seclists/Discovery/Web-Content/common.txt[/cyan] - SecLists com√∫n\n"
            "‚Ä¢ [cyan]common[/cyan] - Usar wordlist por defecto",
            title="Wordlists Disponibles",
            border_style="yellow"
        ))
        
        wordlist = Prompt.ask(
            "[bold cyan]üìö Wordlist[/bold cyan]",
            default="common"
        )
        
        extensions = Prompt.ask(
            "[bold cyan]üìÑ Extensiones (separadas por coma)[/bold cyan]",
            default="php,html,txt,js"
        )
        
        threads = IntPrompt.ask(
            "[bold cyan]üßµ N√∫mero de hilos[/bold cyan]",
            default=10
        )
        
        if Confirm.ask(f"[yellow]¬øEjecutar fuerza bruta en {target}?[/yellow]"):
            try:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=self.console
                ) as progress:
                    task = progress.add_task("Ejecutando Gobuster...", total=None)
                    
                    result = await gobuster.directory_scan(target, wordlist, extensions.split(','), threads)
                    
                    progress.update(task, description="¬°Escaneo completado!")
                
                self.logger.log_tool_output("gobuster", f"Escaneo de directorios en {target} completado", False)
                
                if result:
                    self.console.print(Panel(
                        f"[bold green]‚úÖ Escaneo Gobuster Completado[/bold green]\n\n"
                        f"üéØ Target: [cyan]{target}[/cyan]\n"
                        f"üìö Wordlist: [yellow]{wordlist}[/yellow]\n"
                        f"üìä Resultados guardados en logs",
                        title="Resultado",
                        border_style="green"
                    ))
                
            except Exception as e:
                self.logger.log_tool_output("gobuster", f"Error: {str(e)}", True)
                self.console.print(f"[red]‚ùå Error ejecutando Gobuster: {str(e)}[/red]")
    
    async def _use_nikto(self):
        """Interfaz para usar Nikto"""
        nikto = NiktoWrapper(self.scanner.config)
        
        target = Prompt.ask(
            "[bold cyan]üéØ URL objetivo[/bold cyan]",
            default="http://scanme.nmap.org"
        )
        
        port = IntPrompt.ask(
            "[bold cyan]üîå Puerto[/bold cyan]",
            default=80
        )
        
        if Confirm.ask(f"[yellow]¬øEjecutar escaneo Nikto en {target}:{port}?[/yellow]"):
            try:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=self.console
                ) as progress:
                    task = progress.add_task("Ejecutando Nikto...", total=None)
                    
                    result = await nikto.scan_web_server(target, port)
                    
                    progress.update(task, description="¬°Escaneo completado!")
                
                self.logger.log_tool_output("nikto", f"Escaneo web de {target}:{port} completado", False)
                
                if result:
                    self.console.print(Panel(
                        f"[bold green]‚úÖ Escaneo Nikto Completado[/bold green]\n\n"
                        f"üéØ Target: [cyan]{target}:{port}[/cyan]\n"
                        f"üìä Resultados guardados en logs",
                        title="Resultado",
                        border_style="green"
                    ))
                
            except Exception as e:
                self.logger.log_tool_output("nikto", f"Error: {str(e)}", True)
                self.console.print(f"[red]‚ùå Error ejecutando Nikto: {str(e)}[/red]")
    
    async def _use_sqlmap(self):
        """Interfaz para usar SQLMap"""
        sqlmap = SqlMapWrapper(self.scanner.config)
        
        url = Prompt.ask(
            "[bold cyan]üéØ URL con par√°metros[/bold cyan]",
            default="http://scanme.nmap.org/page.php?id=1"
        )
        
        # Mostrar opciones de SQLMap
        self.console.print(Panel(
            "[bold yellow]üíâ Opciones de SQLMap[/bold yellow]\n\n"
            "‚Ä¢ [cyan]--dbs[/cyan] - Enumerar bases de datos\n"
            "‚Ä¢ [cyan]--tables[/cyan] - Enumerar tablas\n"
            "‚Ä¢ [cyan]--columns[/cyan] - Enumerar columnas\n"
            "‚Ä¢ [cyan]--dump[/cyan] - Extraer datos\n"
            "‚Ä¢ [cyan]--batch[/cyan] - Modo no interactivo",
            title="Opciones SQLMap",
            border_style="yellow"
        ))
        
        enumerate_dbs = Confirm.ask("[cyan]¬øEnumerar bases de datos?[/cyan]", default=True)
        
        if Confirm.ask(f"[yellow]¬øEjecutar SQLMap en {url}?[/yellow]"):
            try:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=self.console
                ) as progress:
                    task = progress.add_task("Ejecutando SQLMap...", total=None)
                    
                    options = ['--batch']
                    if enumerate_dbs:
                        options.append('--dbs')
                    
                    result = await sqlmap.test_injection(url, additional_args=options)
                    
                    progress.update(task, description="¬°Escaneo completado!")
                
                self.logger.log_tool_output("sqlmap", f"Prueba de inyecci√≥n SQL en {url} completada", False)
                
                if result:
                    self.console.print(Panel(
                        f"[bold green]‚úÖ Escaneo SQLMap Completado[/bold green]\n\n"
                        f"üéØ Target: [cyan]{url}[/cyan]\n"
                        f"üìä Resultados guardados en logs",
                        title="Resultado",
                        border_style="green"
                    ))
                
            except Exception as e:
                self.logger.log_tool_output("sqlmap", f"Error: {str(e)}", True)
                self.console.print(f"[red]‚ùå Error ejecutando SQLMap: {str(e)}[/red]")
    
    async def _use_ssl_analyzer(self):
        """Interfaz para usar SSL Analyzer"""
        ssl_analyzer = SSLAnalyzer(self.console)
        
        domain = Prompt.ask(
            "[bold cyan]üéØ Dominio[/bold cyan]",
            default="scanme.nmap.org"
        )
        
        port = IntPrompt.ask(
            "[bold cyan]üîå Puerto SSL[/bold cyan]",
            default=443
        )
        
        if Confirm.ask(f"[yellow]¬øAnalizar SSL/TLS de {domain}:{port}?[/yellow]"):
            try:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=self.console
                ) as progress:
                    task = progress.add_task("Analizando SSL/TLS...", total=None)
                    
                    result = await ssl_analyzer.analyze_domain(domain, port)
                    
                    progress.update(task, description="¬°An√°lisis completado!")
                
                self.logger.log_tool_output("ssl_analyzer", f"An√°lisis SSL de {domain}:{port} completado", False)
                
                if result:
                    ssl_analyzer.display_results(result)
                
            except Exception as e:
                self.logger.log_tool_output("ssl_analyzer", f"Error: {str(e)}", True)
                self.console.print(f"[red]‚ùå Error analizando SSL: {str(e)}[/red]")
    
    async def _use_ffuf(self):
        """Interfaz para usar FFUF"""
        ffuf = FfufWrapper(self.scanner.config)
        
        url = Prompt.ask(
            "[bold cyan]üéØ URL base (usa FUZZ como placeholder)[/bold cyan]",
            default="http://scanme.nmap.org/FUZZ"
        )
        
        wordlist = Prompt.ask(
            "[bold cyan]üìö Wordlist[/bold cyan]",
            default="/usr/share/wordlists/dirb/common.txt"
        )
        
        if Confirm.ask(f"[yellow]¬øEjecutar FFUF en {url}?[/yellow]"):
            try:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=self.console
                ) as progress:
                    task = progress.add_task("Ejecutando FFUF...", total=None)
                    
                    result = await ffuf.fuzz_target(url, wordlist)
                    
                    progress.update(task, description="¬°Fuzzing completado!")
                
                self.logger.log_tool_output("ffuf", f"Fuzzing de {url} completado", False)
                
                if result:
                    self.console.print(Panel(
                        f"[bold green]‚úÖ Fuzzing FFUF Completado[/bold green]\n\n"
                        f"üéØ Target: [cyan]{url}[/cyan]\n"
                        f"üìö Wordlist: [yellow]{wordlist}[/yellow]\n"
                        f"üìä Resultados guardados en logs",
                        title="Resultado",
                        border_style="green"
                    ))
                
            except Exception as e:
                self.logger.log_tool_output("ffuf", f"Error: {str(e)}", True)
                self.console.print(f"[red]‚ùå Error ejecutando FFUF: {str(e)}[/red]")
    
    async def _use_shodan(self):
        """Interfaz para usar Shodan"""
        shodan = ShodanWrapper(self.scanner.config)
        
        query = Prompt.ask(
            "[bold cyan]üîç Consulta Shodan[/bold cyan]",
            default="apache"
        )
        
        if Confirm.ask(f"[yellow]¬øBuscar en Shodan: {query}?[/yellow]"):
            try:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=self.console
                ) as progress:
                    task = progress.add_task("Consultando Shodan...", total=None)
                    
                    result = await shodan.search_query(query)
                    
                    progress.update(task, description="¬°B√∫squeda completada!")
                
                self.logger.log_tool_output("shodan", f"B√∫squeda '{query}' completada", False)
                
                if result:
                    self.console.print(Panel(
                        f"[bold green]‚úÖ B√∫squeda Shodan Completada[/bold green]\n\n"
                        f"üîç Query: [cyan]{query}[/cyan]\n"
                        f"üìä Resultados guardados en logs",
                        title="Resultado",
                        border_style="green"
                    ))
                
            except Exception as e:
                self.logger.log_tool_output("shodan", f"Error: {str(e)}", True)
                self.console.print(f"[red]‚ùå Error consultando Shodan: {str(e)}[/red]")
    
    async def _use_traceroute(self):
        """Interfaz para usar Traceroute"""
        traceroute = TracerouteWrapper(self.scanner.config)
        
        target = Prompt.ask(
            "[bold cyan]üéØ Destino[/bold cyan]",
            default="8.8.8.8"
        )
        
        if Confirm.ask(f"[yellow]¬øEjecutar traceroute a {target}?[/yellow]"):
            try:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=self.console
                ) as progress:
                    task = progress.add_task("Ejecutando traceroute...", total=None)
                    
                    result = await traceroute.trace_to_target(target)
                    
                    progress.update(task, description="¬°Traceroute completado!")
                
                self.logger.log_tool_output("traceroute", f"Traceroute a {target} completado", False)
                
                if result:
                    self.console.print(Panel(
                        f"[bold green]‚úÖ Traceroute Completado[/bold green]\n\n"
                        f"üéØ Target: [cyan]{target}[/cyan]\n"
                        f"üìä Resultados guardados en logs",
                        title="Resultado",
                        border_style="green"
                    ))
                
            except Exception as e:
                self.logger.log_tool_output("traceroute", f"Error: {str(e)}", True)
                self.console.print(f"[red]‚ùå Error ejecutando traceroute: {str(e)}[/red]")
    
    async def _use_w3af(self):
        """Interfaz para usar W3AF"""
        w3af = W3afWrapper(self.scanner.config)
        
        target = Prompt.ask(
            "[bold cyan]üéØ URL objetivo[/bold cyan]",
            default="http://scanme.nmap.org"
        )
        
        if Confirm.ask(f"[yellow]¬øEjecutar auditor√≠a W3AF en {target}?[/yellow]"):
            try:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=self.console
                ) as progress:
                    task = progress.add_task("Ejecutando W3AF...", total=None)
                    
                    result = await w3af.audit_target(target)
                    
                    progress.update(task, description="¬°Auditor√≠a completada!")
                
                self.logger.log_tool_output("w3af", f"Auditor√≠a de {target} completada", False)
                
                if result:
                    self.console.print(Panel(
                        f"[bold green]‚úÖ Auditor√≠a W3AF Completada[/bold green]\n\n"
                        f"üéØ Target: [cyan]{target}[/cyan]\n"
                        f"üìä Resultados guardados en logs",
                        title="Resultado",
                        border_style="green"
                    ))
                
            except Exception as e:
                self.logger.log_tool_output("w3af", f"Error: {str(e)}", True)
                self.console.print(f"[red]‚ùå Error ejecutando W3AF: {str(e)}[/red]")
    
    async def _use_censys(self):
        """Interfaz para usar Censys"""
        censys = CensysWrapper(self.scanner.config)
        
        query = Prompt.ask(
            "[bold cyan]üîç Consulta Censys[/bold cyan]",
            default="services.service_name: HTTP"
        )
        
        if Confirm.ask(f"[yellow]¬øBuscar en Censys: {query}?[/yellow]"):
            try:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=self.console
                ) as progress:
                    task = progress.add_task("Consultando Censys...", total=None)
                    
                    result = await censys.search_hosts_query(query)
                    
                    progress.update(task, description="¬°B√∫squeda completada!")
                
                self.logger.log_tool_output("censys", f"B√∫squeda '{query}' completada", False)
                
                if result:
                    self.console.print(Panel(
                        f"[bold green]‚úÖ B√∫squeda Censys Completada[/bold green]\n\n"
                        f"üîç Query: [cyan]{query}[/cyan]\n"
                        f"üìä Resultados guardados en logs",
                        title="Resultado",
                        border_style="green"
                    ))
                
            except Exception as e:
                self.logger.log_tool_output("censys", f"Error: {str(e)}", True)
                self.console.print(f"[red]‚ùå Error consultando Censys: {str(e)}[/red]") 