"""
CLI principal moderna para Aegis Pentest Automation
Interfaz completamente interactiva sin par√°metros
"""

import asyncio
import sys
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from rich.prompt import Prompt, Confirm
from rich import box

from aegis_pentest.core.scanner import AegisScanner
from aegis_pentest.utils.config import Config
from aegis_pentest.utils.installer import ToolInstaller
from aegis_pentest.utils.helpers import validate_target
from .display import DisplayManager
from .interactive import InteractiveMode


class AegisCLI:
    """Interfaz CLI moderna y enriquecida para Aegis"""
    
    def __init__(self):
        self.console = Console()
        self.config = Config()
        self.installer = ToolInstaller(self.console)
        self.scanner = AegisScanner(self.config)
        self.display = DisplayManager(self.console)
        self.interactive = InteractiveMode(self.console, self.scanner, self.display)
        self.current_scan = None
        
    def print_banner(self):
        """Muestra el banner de Aegis"""
        banner = Text.assemble(
            ("    ___    __________ _____ _____\n", "bold cyan"),
            ("   /   |  / ____/ __ \\_   _/ ___/\n", "bold cyan"),
            ("  / /| | / __/ / / / / // / \\__ \\ \n", "bold cyan"),
            (" / ___ |/ /___/ /_/ _// /_____/ / \n", "bold cyan"),
            ("/_/  |_/_____/\\____/___//____/  \n", "bold cyan"),
            ("\nüõ°Ô∏è  ", "bold white"),
            ("Automatizaci√≥n de Pentesting Web", "bold white"),
            (" üõ°Ô∏è\n", "bold white"),
            ("v1.0.0", "dim white")
        )
        
        panel = Panel(
            banner,
            title="[bold red]AEGIS PENTEST AUTOMATION[/bold red]",
            border_style="bright_blue",
            padding=(1, 2)
        )
        self.console.print(panel)
        self.console.print()
    
    def show_main_menu(self):
        """Muestra el men√∫ principal"""
        table = Table(title="üéØ Men√∫ Principal", box=box.ROUNDED)
        table.add_column("Opci√≥n", style="cyan", min_width=3)
        table.add_column("Descripci√≥n", style="white")
        table.add_column("Tiempo Est.", style="yellow", justify="center")
        
        table.add_row("1", "[bold green]Escaneo R√°pido[/bold green] - Puertos comunes", "5-15 min")
        table.add_row("2", "[bold blue]Escaneo Completo[/bold blue] - M√∫ltiples herramientas", "30-60 min")
        table.add_row("3", "[bold red]Escaneo de Vulnerabilidades[/bold red] - Detecci√≥n CVE", "20-45 min")
        table.add_row("4", "[bold magenta]Escaneo Sigiloso[/bold magenta] - Evasi√≥n", "10-30 min")
        table.add_row("5", "[bold cyan]Modo Interactivo[/bold cyan] - Configuraci√≥n avanzada", "Variable")
        table.add_row("6", "[dim]Estado de Herramientas[/dim] - Verificar disponibilidad", "< 1 min")
        table.add_row("7", "[dim]Configuraci√≥n[/dim] - Ajustes del sistema", "< 1 min")
        table.add_row("0", "[bold red]Salir[/bold red]", "")
        
        self.console.print(table)
        self.console.print()
    
    def get_target(self):
        """Solicita y valida el objetivo"""
        while True:
            target = Prompt.ask(
                "[bold cyan]üéØ Ingresa el objetivo[/bold cyan]",
                default="scanme.nmap.org"
            )
            
            if target:
                is_valid, target_type, message = validate_target(target)
                if is_valid:
                    self.console.print(f"[green]‚úì[/green] Objetivo v√°lido: {target} ({target_type})")
                    return target
                else:
                    self.console.print(f"[red]‚úó[/red] {message}")
            else:
                self.console.print("[red]‚úó[/red] Por favor ingresa un objetivo v√°lido")
    
    def get_ports(self, default_ports="1-1000"):
        """Solicita la configuraci√≥n de puertos"""
        ports = Prompt.ask(
            "[bold cyan]üîå Puertos a escanear[/bold cyan]",
            default=default_ports
        )
        return ports
    
    async def run_scan(self, scan_type, target, options=None):
        """Ejecuta un escaneo con progress bar"""
        options = options or {}
        
        # Configurar callback de progreso
        progress_data = {"current": 0, "total": 100, "message": "Iniciando..."}
        
        def progress_callback(step, total, percentage, message):
            progress_data["current"] = int(percentage)
            progress_data["message"] = message
        
        try:
            self.scanner.add_progress_callback(progress_callback)
        except AttributeError:
            # Si no existe el m√©todo, continuar sin callback
            pass
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TaskProgressColumn(),
            console=self.console
        ) as progress:
            
            progress_task = progress.add_task("Escaneando...", total=100)
            
            try:
                # Crear tarea de escaneo y convertir a Task
                if scan_type == "quick":
                    scan_coro = self.scanner.basic_scan(target, options.get('ports', '1-1000'))
                elif scan_type == "full":
                    scan_coro = self.scanner.comprehensive_scan(target, options)
                elif scan_type == "vulnerability":
                    scan_coro = self.scanner.vulnerability_scan(target, options)
                elif scan_type == "stealth":
                    scan_coro = self.scanner.nmap.stealth_scan(target, options.get('ports', '80,443,8080,8443'))
                else:
                    raise ValueError(f"Tipo de escaneo desconocido: {scan_type}")
                
                # Convertir corrutina en Task para poder usar .done()
                scan_task = asyncio.create_task(scan_coro)
                
                # Ejecutar escaneo con actualizaciones de progreso
                while not scan_task.done():
                    progress.update(
                        progress_task,
                        completed=progress_data["current"],
                        description=progress_data["message"]
                    )
                    await asyncio.sleep(0.1)
                
                # Obtener resultado
                result = await scan_task
                progress.update(progress_task, completed=100, description="¬°Completado!")
                
                return result
                
            except Exception as e:
                self.console.print(f"[red]‚úó Error en escaneo: {str(e)}[/red]")
                return None
    
    async def quick_scan_mode(self):
        """Modo de escaneo r√°pido"""
        self.console.print(Panel(
            "[bold green]üöÄ ESCANEO R√ÅPIDO[/bold green]\n"
            "Escaneo b√°sico de puertos comunes con Nmap",
            border_style="green"
        ))
        
        target = self.get_target()
        ports = self.get_ports("1-1000")
        
        if Confirm.ask("[yellow]¬øIniciar escaneo r√°pido?[/yellow]"):
            result = await self.run_scan("quick", target, {"ports": ports})
            if result:
                self.display.show_scan_results(result)
    
    async def full_scan_mode(self):
        """Modo de escaneo completo"""
        self.console.print(Panel(
            "[bold blue]üîç ESCANEO COMPLETO[/bold blue]\n"
            "Escaneo comprehensivo con m√∫ltiples herramientas",
            border_style="blue"
        ))
        
        target = self.get_target()
        ports = self.get_ports("1-65535")
        
        options = {
            "ports": ports,
            "detect_os": Confirm.ask("[cyan]¬øDetectar sistema operativo?[/cyan]", default=True),
            "detect_services": Confirm.ask("[cyan]¬øDetectar servicios?[/cyan]", default=True),
            "run_scripts": Confirm.ask("[cyan]¬øEjecutar scripts NSE?[/cyan]", default=False)
        }
        
        if Confirm.ask("[yellow]¬øIniciar escaneo completo?[/yellow]"):
            result = await self.run_scan("full", target, options)
            if result:
                self.display.show_scan_results(result)
    
    async def vulnerability_scan_mode(self):
        """Modo de escaneo de vulnerabilidades"""
        self.console.print(Panel(
            "[bold red]üö® ESCANEO DE VULNERABILIDADES[/bold red]\n"
            "Detecci√≥n especializada de CVEs y vulnerabilidades",
            border_style="red"
        ))
        
        target = self.get_target()
        ports = self.get_ports("1-1000")
        
        options = {
            "ports": ports,
            "run_scripts": True,
            "run_sqlmap": Confirm.ask("[cyan]¬øEjecutar SQLMap (solo para web)?[/cyan]", default=False)
        }
        
        if Confirm.ask("[yellow]¬øIniciar escaneo de vulnerabilidades?[/yellow]"):
            result = await self.run_scan("vulnerability", target, options)
            if result:
                self.display.show_scan_results(result)
    
    async def stealth_scan_mode(self):
        """Modo de escaneo sigiloso"""
        self.console.print(Panel(
            "[bold magenta]ü•∑ ESCANEO SIGILOSO[/bold magenta]\n"
            "T√©cnicas de evasi√≥n para evitar detecci√≥n",
            border_style="magenta"
        ))
        
        target = self.get_target()
        ports = self.get_ports("80,443,8080,8443")
        
        if Confirm.ask("[yellow]¬øIniciar escaneo sigiloso?[/yellow]"):
            result = await self.run_scan("stealth", target, {"ports": ports})
            if result:
                self.display.show_scan_results(result)
    
    async def show_tools_status(self):
        """Muestra el estado de las herramientas con opciones de instalaci√≥n"""
        missing_tools = self.display.show_tools_status(self.config, self.installer)
        
        if missing_tools:
            choice = Prompt.ask(
                "[bold yellow]¬øQu√© deseas hacer?[/bold yellow]",
                choices=["i", "s", "p", ""],
                default=""
            )
            
            if choice == "i":
                # Instalar todas las herramientas faltantes
                await self._install_all_missing_tools(missing_tools)
            elif choice == "s":
                # Seleccionar herramientas espec√≠ficas
                await self._install_selected_tools(missing_tools)
            elif choice == "p":
                # Verificar prerequisitos
                self._show_prerequisites()
    
    async def _install_all_missing_tools(self, tools: list):
        """Instala todas las herramientas faltantes"""
        self.console.print(Panel(
            f"[bold cyan]üì¶ Instalando {len(tools)} herramientas...[/bold cyan]",
            border_style="cyan"
        ))
        
        if not Confirm.ask(f"[yellow]¬øContinuar con la instalaci√≥n de {', '.join(tools)}?[/yellow]"):
            return
        
        results = {}
        for tool in tools:
            success, message = await self.installer.install_tool(tool)
            results[tool] = (success, message)
            
            # Actualizar configuraci√≥n si la instalaci√≥n fue exitosa
            if success:
                self.config.load()  # Recargar configuraci√≥n
        
        self.installer.show_installation_summary(results)
    
    async def _install_selected_tools(self, tools: list):
        """Permite seleccionar herramientas espec√≠ficas para instalar"""
        self.console.print(Panel(
            "[bold cyan]üì¶ Selecci√≥n de Herramientas[/bold cyan]",
            border_style="cyan"
        ))
        
        selected_tools = []
        for tool in tools:
            config = self.installer.tools_config.get(tool, {})
            description = config.get('description', '')
            
            if Confirm.ask(f"[cyan]¬øInstalar {tool}?[/cyan] [dim]({description})[/dim]"):
                selected_tools.append(tool)
        
        if selected_tools:
            await self._install_all_missing_tools(selected_tools)
        else:
            self.console.print("[yellow]‚ö†Ô∏è  No se seleccion√≥ ninguna herramienta[/yellow]")
    
    def _show_prerequisites(self):
        """Muestra el estado de los prerequisitos del sistema"""
        prereqs = self.installer.check_prerequisites()
        
        self.console.print(Panel(
            "[bold cyan]üîç PREREQUISITOS DEL SISTEMA[/bold cyan]",
            border_style="cyan"
        ))
        
        prereq_table = Table(box=box.ROUNDED)
        prereq_table.add_column("Prerequisito", style="cyan")
        prereq_table.add_column("Estado", style="white", justify="center")
        prereq_table.add_column("Descripci√≥n", style="dim white")
        
        descriptions = {
            'homebrew': 'Gestor de paquetes para macOS',
            'apt': 'Gestor de paquetes para Debian/Ubuntu',
            'yum': 'Gestor de paquetes para RHEL/CentOS',
            'pacman': 'Gestor de paquetes para Arch Linux',
            'go': 'Lenguaje Go para herramientas modernas',
            'git': 'Sistema de control de versiones'
        }
        
        for prereq, available in prereqs.items():
            status = "üü¢ Disponible" if available else "üî¥ No disponible"
            description = descriptions.get(prereq, '')
            prereq_table.add_row(prereq.upper(), status, description)
        
        self.console.print(prereq_table)
        
        # Ofrecer instalar prerequisitos faltantes
        missing_prereqs = [name for name, available in prereqs.items() if not available]
        if missing_prereqs:
            self.console.print()
            if Confirm.ask("[yellow]¬øInstalar prerequisitos faltantes autom√°ticamente?[/yellow]"):
                if self.installer.install_prerequisites():
                    self.console.print("[green]‚úì Prerequisitos instalados correctamente[/green]")
                else:
                    self.console.print("[red]‚úó Error instalando prerequisitos[/red]")
    
    def show_configuration(self):
        """Muestra la configuraci√≥n actual"""
        self.display.show_configuration(self.config)
    
    async def run(self):
        """Bucle principal de la CLI"""
        self.print_banner()
        
        while True:
            self.show_main_menu()
            
            choice = Prompt.ask(
                "[bold yellow]Selecciona una opci√≥n[/bold yellow]",
                choices=["0", "1", "2", "3", "4", "5", "6", "7"],
                default="1"
            )
            
            self.console.print()
            
            try:
                if choice == "0":
                    self.console.print("[bold red]üëã ¬°Hasta luego![/bold red]")
                    break
                elif choice == "1":
                    await self.quick_scan_mode()
                elif choice == "2":
                    await self.full_scan_mode()
                elif choice == "3":
                    await self.vulnerability_scan_mode()
                elif choice == "4":
                    await self.stealth_scan_mode()
                elif choice == "5":
                    await self.interactive.run()
                elif choice == "6":
                    await self.show_tools_status()
                elif choice == "7":
                    self.show_configuration()
                
                if choice != "0":
                    self.console.print()
                    Prompt.ask("[dim]Presiona Enter para continuar...[/dim]", default="")
                    self.console.clear()
                    self.print_banner()
                    
            except KeyboardInterrupt:
                self.console.print("\n[yellow]‚ö†Ô∏è  Operaci√≥n cancelada[/yellow]")
                if Confirm.ask("[red]¬øSalir de Aegis?[/red]"):
                    break
            except Exception as e:
                self.console.print(f"[red]üí• Error inesperado: {str(e)}[/red]") 