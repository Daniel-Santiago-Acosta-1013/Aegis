"""
M√≥dulo de visualizaci√≥n enriquecida para resultados de escaneo
"""

from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, BarColumn, TextColumn, TaskProgressColumn
from rich.text import Text
from rich.tree import Tree
from rich.columns import Columns
from rich.align import Align
from rich.live import Live
from rich import box
from rich.layout import Layout
from rich.status import Status
import time
from typing import Dict, List, Any


class DisplayManager:
    """Gestor de visualizaci√≥n enriquecida"""
    
    def __init__(self, console: Console):
        self.console = console
    
    def show_scan_results(self, results):
        """Muestra un resumen simple del escaneo completado"""
        self.console.clear()
        
        # Banner de finalizaci√≥n
        status_color = "green" if hasattr(results, 'status') and results.status == 'completed' else "yellow"
        
        # Determinar herramientas usadas bas√°ndose en los resultados
        tools_used = []
        if hasattr(results, 'nmap_results') and results.nmap_results:
            tools_used.append("Nmap")
        if hasattr(results, 'nuclei_results') and results.nuclei_results:
            tools_used.append("Nuclei")
        if hasattr(results, 'gobuster_results') and results.gobuster_results:
            tools_used.append("Gobuster")
        if hasattr(results, 'nikto_results') and results.nikto_results:
            tools_used.append("Nikto")
        if hasattr(results, 'sqlmap_results') and results.sqlmap_results:
            tools_used.append("SQLMap")
        if hasattr(results, 'ffuf_results') and results.ffuf_results:
            tools_used.append("FFUF")
        if hasattr(results, 'zap_results') and results.zap_results:
            tools_used.append("OWASP ZAP")
        if hasattr(results, 'nginxpwner_results') and results.nginxpwner_results:
            tools_used.append("NginxPwner")
        if hasattr(results, 'w3af_results') and results.w3af_results:
            tools_used.append("W3AF")
        if hasattr(results, 'shodan_results') and results.shodan_results:
            tools_used.append("Shodan")
        if hasattr(results, 'traceroute_results') and results.traceroute_results:
            tools_used.append("Traceroute")
        if hasattr(results, 'censys_results') and results.censys_results:
            tools_used.append("Censys")
        if hasattr(results, 'apache_vuln_results') and results.apache_vuln_results:
            tools_used.append("Apache Vuln Scanner")
        
        # Crear mensaje de finalizaci√≥n
        tools_list = ", ".join(tools_used) if tools_used else "Ninguna herramienta ejecutada"
        
        # Mostrar informaci√≥n b√°sica del escaneo
        target = getattr(results, 'target', 'Desconocido')
        scan_type = getattr(results, 'scan_type', 'desconocido')
        duration = getattr(results, 'duration', None)
        duration_str = f"{duration:.2f} segundos" if duration else "N/A"
        
        panel_content = f"[bold green]‚úÖ An√°lisis Finalizado[/bold green]\n\n"
        panel_content += f"üéØ [bold cyan]Objetivo:[/bold cyan] {target}\n"
        panel_content += f"üìÖ [bold cyan]Tipo:[/bold cyan] {scan_type}\n"
        panel_content += f"‚è±Ô∏è [bold cyan]Duraci√≥n:[/bold cyan] {duration_str}\n\n"
        panel_content += f"üîß [bold cyan]Herramientas utilizadas:[/bold cyan]\n{tools_list}\n\n"
        panel_content += f"üìÅ [dim]Los resultados detallados se encuentran en el archivo de log[/dim]"
        
        self.console.print(Panel(
            panel_content,
            title="[bold blue]ESCANEO COMPLETADO[/bold blue]",
            border_style=status_color,
            padding=(1, 2)
        ))
        self.console.print()
    
    def show_tools_status(self, config, installer=None, show_header=True):
        """Muestra el estado de las herramientas con opciones de instalaci√≥n"""
        if show_header:
            self.console.print(Panel(
                "[bold cyan]üîß ESTADO DE HERRAMIENTAS[/bold cyan]",
                border_style="cyan"
            ))
        
        tools_table = Table(box=box.ROUNDED)
        tools_table.add_column("Herramienta", style="cyan", min_width=12)
        tools_table.add_column("Estado", style="white", justify="center")
        tools_table.add_column("Versi√≥n", style="green")
        tools_table.add_column("Ruta", style="dim white")
        tools_table.add_column("Acciones", style="yellow", justify="center")
        
        tools_to_check = [
            'nmap', 'nuclei', 'gobuster', 'nikto', 'sqlmap', 'hydra', 'subfinder',
            'ffuf', 'zap-baseline.py', 'shodan', 'traceroute', 'w3af_console',
            'censys', 'openssl', 'nginxpwner', 'apache_vuln'
        ]
        missing_tools = []
        
        for tool in tools_to_check:
            is_available = config.is_tool_available(tool)
            status = "üü¢ Disponible" if is_available else "üî¥ No disponible"
            version = config.get_tool_version(tool) if is_available else "N/A"
            path = config.get_tool_path(tool) if is_available else "No encontrado"
            
            # Determinar acciones disponibles
            actions = "‚úÖ OK" if is_available else ""
            if not is_available and installer and installer.is_tool_installable(tool):
                actions = "üì¶ Instalable"
                missing_tools.append(tool)
            elif not is_available:
                actions = "‚ùå No instalable"
            
            tools_table.add_row(tool.upper(), status, version, path, actions)
        
        self.console.print(tools_table)
        
        # Mostrar opciones de instalaci√≥n solo si hay herramientas faltantes y show_header es True
        if missing_tools and installer and show_header:
            self.console.print()
            self.console.print(Panel(
                f"[bold yellow]üì¶ Herramientas faltantes detectadas: {len(missing_tools)}[/bold yellow]\n\n"
                "[dim]Opciones disponibles:[/dim]\n"
                "‚Ä¢ [green]i[/green] - Instalar herramientas faltantes autom√°ticamente\n"
                "‚Ä¢ [cyan]s[/cyan] - Seleccionar herramientas espec√≠ficas para instalar\n"
                "‚Ä¢ [yellow]p[/yellow] - Verificar prerequisitos del sistema\n"
                "‚Ä¢ [red]Enter[/red] - Volver al men√∫ principal",
                title="üõ†Ô∏è Instalaci√≥n Autom√°tica",
                border_style="yellow"
            ))
        
        if show_header:
            self.console.print()
        
        return missing_tools
    
    def show_configuration(self, config):
        """Muestra la configuraci√≥n actual"""
        self.console.print(Panel(
            "[bold yellow]‚öôÔ∏è CONFIGURACI√ìN ACTUAL[/bold yellow]",
            border_style="yellow"
        ))
        
        config_table = Table(box=box.ROUNDED)
        config_table.add_column("Par√°metro", style="cyan", min_width=20)
        config_table.add_column("Valor", style="white")
        config_table.add_column("Descripci√≥n", style="dim white")
        
        # Obtener configuraci√≥n
        settings = [
            ("Timeout", str(config.get_setting('timeout', 30)), "Tiempo l√≠mite para operaciones"),
            ("Threads", str(config.get_setting('threads', 10)), "N√∫mero de hilos concurrentes"),
            ("Output Dir", config.get_setting('output_dir', './results'), "Directorio de resultados"),
            ("Verbose", str(config.get_setting('verbose', False)), "Modo verboso activado"),
            ("User Agent", config.get_setting('user_agent', 'Aegis/1.0'), "User-Agent para HTTP"),
        ]
        
        for param, value, desc in settings:
            config_table.add_row(param, value, desc)
        
        self.console.print(config_table)
        self.console.print()
    
    def show_live_progress(self, target: str, scan_type: str):
        """Muestra progreso en vivo durante el escaneo"""
        with Live(self._create_progress_layout(target, scan_type), console=self.console, refresh_per_second=10) as live:
            return live
    
    def _create_progress_layout(self, target: str, scan_type: str) -> Layout:
        """Crea el layout de progreso en tiempo real"""
        layout = Layout()
        
        header = Panel(
            f"[bold green]üîç Escaneando:[/bold green] {target}\n"
            f"[bold cyan]Tipo:[/bold cyan] {scan_type}",
            title="[bold red]ESCANEO EN PROGRESO[/bold red]",
            border_style="green"
        )
        
        layout.update(header)
        return layout 