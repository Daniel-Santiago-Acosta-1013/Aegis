"""
Módulo de visualización enriquecida para resultados de escaneo
"""

from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, BarColumn, TextColumn, TaskProgressColumn
from rich.text import Text
from rich.tree import Tree
from rich.columns import Columns
from rich.align import Align
from rich.live import Live
from rich import box
from rich.layout import Layout
from rich.status import Status
import time
from typing import Dict, List, Any


class DisplayManager:
    """Gestor de visualización enriquecida"""
    
    def __init__(self, console: Console):
        self.console = console
    
    def show_scan_results(self, results):
        """Muestra los resultados del escaneo de forma visual"""
        self.console.clear()
        
        # Banner de resultados
        status_color = "green" if hasattr(results, 'status') and results.status == 'completed' else "yellow"
        self.console.print(Panel(
            f"[bold {status_color}]✅ ESCANEO COMPLETADO[/bold {status_color}]",
            title="[bold blue]RESULTADOS DEL ESCANEO[/bold blue]",
            border_style=status_color
        ))
        self.console.print()
        
        # Mostrar información del escaneo
        if hasattr(results, 'target'):
            self.console.print(f"[bold cyan]🎯 Objetivo:[/bold cyan] {results.target}")
            self.console.print(f"[bold cyan]📅 Tipo de escaneo:[/bold cyan] {getattr(results, 'scan_type', 'desconocido')}")
            if hasattr(results, 'duration') and results.duration:
                self.console.print(f"[bold cyan]⏱️  Duración:[/bold cyan] {results.duration:.2f} segundos")
            self.console.print()
        
        # Layout principal
        layout = Layout()
        layout.split_column(
            Layout(name="stats", size=8),
            Layout(name="main")
        )
        
        layout["main"].split_row(
            Layout(name="ports"),
            Layout(name="services")
        )
        
        # Estadísticas generales
        stats_table = self._create_stats_table(results)
        layout["stats"].update(Panel(stats_table, title="📊 Estadísticas", border_style="cyan"))
        
        # Tabla de puertos
        ports = getattr(results, 'open_ports', []) if hasattr(results, 'open_ports') else []
        ports_table = self._create_ports_table(ports)
        layout["ports"].update(Panel(ports_table, title="🔌 Puertos Detectados", border_style="blue"))
        
        # Tabla de servicios  
        services = getattr(results, 'services', []) if hasattr(results, 'services') else []
        services_table = self._create_services_table(services)
        layout["services"].update(Panel(services_table, title="⚙️ Servicios", border_style="green"))
        
        self.console.print(layout)
        self.console.print()
        
        # Vulnerabilidades (si existen)
        vulnerabilities = getattr(results, 'vulnerabilities', []) if hasattr(results, 'vulnerabilities') else []
        if vulnerabilities:
            self._show_vulnerabilities(vulnerabilities)
        
        # OS Detection (si existe)
        if hasattr(results, 'nmap_results') and results.nmap_results and hasattr(results.nmap_results, 'os_info'):
            self._show_os_info(results.nmap_results.os_info)
        
        # Scripts results (si existen)
        if hasattr(results, 'nmap_results') and results.nmap_results and hasattr(results.nmap_results, 'script_results'):
            self._show_script_results(results.nmap_results.script_results)
    
    def _create_stats_table(self, results) -> Table:
        """Crea tabla de estadísticas generales"""
        table = Table(box=box.MINIMAL_DOUBLE_HEAD)
        table.add_column("Métrica", style="cyan", min_width=15)
        table.add_column("Valor", style="white", justify="center")
        table.add_column("Estado", style="green", justify="center")
        
        # Calcular estadísticas
        if hasattr(results, 'nmap_results') and results.nmap_results:
            total_ports = len(results.nmap_results.ports)
            open_ports = len([p for p in results.nmap_results.ports if p.get('state') == 'open'])
        else:
            total_ports = 0
            open_ports = 0
            
        services = len(getattr(results, 'services', []))
        vulnerabilities = len(getattr(results, 'vulnerabilities', []))
        
        table.add_row("Puertos Escaneados", str(total_ports), "🔍")
        table.add_row("Puertos Abiertos", str(open_ports), "🟢" if open_ports > 0 else "🔴")
        table.add_row("Servicios Detectados", str(services), "⚙️")
        table.add_row("Vulnerabilidades", str(vulnerabilities), "🚨" if vulnerabilities > 0 else "✅")
        
        return table
    
    def _create_ports_table(self, ports: List[Dict[str, Any]]) -> Table:
        """Crea tabla de puertos detectados"""
        table = Table(box=box.ROUNDED)
        table.add_column("Puerto", style="cyan", min_width=8)
        table.add_column("Estado", style="white", justify="center")
        table.add_column("Servicio", style="green")
        table.add_column("Versión", style="yellow")
        
        # Filtrar solo puertos abiertos
        open_ports = [p for p in ports if p.get('state') == 'open']
        
        if not open_ports:
            table.add_row("", "[dim]No hay puertos abiertos[/dim]", "", "")
            return table
        
        for port in open_ports[:20]:  # Limitar a 20 puertos
            estado_icon = "🟢" if port.get('state') == 'open' else "🔴"
            service = port.get('service', 'unknown')
            version = f"{port.get('product', '')} {port.get('version', '')}".strip() or "N/A"
            
            table.add_row(
                f"{port.get('port')}/{port.get('protocol', 'tcp')}",
                f"{estado_icon} {port.get('state')}",
                service,
                version
            )
        
        if len(open_ports) > 20:
            table.add_row("...", f"[dim]+ {len(open_ports) - 20} puertos más[/dim]", "", "")
        
        return table
    
    def _create_services_table(self, services: List[Dict[str, Any]]) -> Table:
        """Crea tabla de servicios detectados"""
        table = Table(box=box.ROUNDED)
        table.add_column("Puerto", style="cyan", min_width=8)
        table.add_column("Servicio", style="green")
        table.add_column("Información", style="white")
        
        if not services:
            table.add_row("", "[dim]No hay servicios detectados[/dim]", "")
            return table
        
        for service in services[:15]:  # Limitar a 15 servicios
            info = service.get('banner', '') or service.get('version', '') or "N/A"
            table.add_row(
                f"{service.get('port')}/{service.get('protocol', 'tcp')}",
                service.get('service', 'unknown'),
                info
            )
        
        if len(services) > 15:
            table.add_row("...", f"[dim]+ {len(services) - 15} servicios más[/dim]", "")
        
        return table
    
    def _show_vulnerabilities(self, vulnerabilities: List[Dict[str, Any]]):
        """Muestra tabla de vulnerabilidades encontradas"""
        self.console.print(Panel(
            "[bold red]🚨 VULNERABILIDADES DETECTADAS[/bold red]",
            border_style="red"
        ))
        
        vuln_table = Table(box=box.DOUBLE_EDGE)
        vuln_table.add_column("CVE/ID", style="red", min_width=15)
        vuln_table.add_column("Severidad", style="white", justify="center")
        vuln_table.add_column("Puerto", style="cyan", justify="center")
        vuln_table.add_column("Descripción", style="white")
        
        for vuln in vulnerabilities[:10]:  # Limitar a 10 vulnerabilidades
            severity = vuln.get('severity', 'unknown').upper()
            severity_color = {
                'CRITICAL': 'bold red',
                'HIGH': 'red',
                'MEDIUM': 'yellow',
                'LOW': 'green',
                'INFO': 'cyan'
            }.get(severity, 'white')
            
            vuln_table.add_row(
                vuln.get('id', 'N/A'),
                f"[{severity_color}]{severity}[/{severity_color}]",
                str(vuln.get('port', 'N/A')),
                vuln.get('description', 'Sin descripción')[:60] + "..." if len(vuln.get('description', '')) > 60 else vuln.get('description', 'Sin descripción')
            )
        
        self.console.print(vuln_table)
        self.console.print()
    
    def _show_os_info(self, os_info: Dict[str, Any]):
        """Muestra información del sistema operativo"""
        if not os_info.get('name'):
            return
        
        os_panel = Panel(
            f"[bold green]Sistema Operativo:[/bold green] {os_info.get('name', 'Desconocido')}\n"
            f"[bold cyan]Precisión:[/bold cyan] {os_info.get('accuracy', 'N/A')}%",
            title="🖥️ Detección de OS",
            border_style="green"
        )
        self.console.print(os_panel)
        self.console.print()
    
    def _show_script_results(self, script_results: List[Dict[str, Any]]):
        """Muestra resultados de scripts NSE"""
        if not script_results:
            return
        
        self.console.print(Panel(
            "[bold cyan]📜 RESULTADOS DE SCRIPTS NSE[/bold cyan]",
            border_style="cyan"
        ))
        
        tree = Tree("Scripts Ejecutados")
        
        for script in script_results[:10]:  # Limitar a 10 scripts
            script_branch = tree.add(f"[cyan]{script.get('script', 'unknown')}[/cyan] (Puerto {script.get('port', 'N/A')})")
            output = script.get('output', 'Sin salida')
            if len(output) > 100:
                output = output[:100] + "..."
            script_branch.add(Text(output, style="dim white"))
        
        self.console.print(tree)
        self.console.print()
    
    def show_tools_status(self, config, installer=None):
        """Muestra el estado de las herramientas con opciones de instalación"""
        self.console.print(Panel(
            "[bold cyan]🔧 ESTADO DE HERRAMIENTAS[/bold cyan]",
            border_style="cyan"
        ))
        
        tools_table = Table(box=box.ROUNDED)
        tools_table.add_column("Herramienta", style="cyan", min_width=12)
        tools_table.add_column("Estado", style="white", justify="center")
        tools_table.add_column("Versión", style="green")
        tools_table.add_column("Ruta", style="dim white")
        tools_table.add_column("Acciones", style="yellow", justify="center")
        
        tools = ['nmap', 'nuclei', 'gobuster', 'nikto', 'sqlmap']
        missing_tools = []
        
        for tool in tools:
            is_available = config.is_tool_available(tool)
            status = "🟢 Disponible" if is_available else "🔴 No disponible"
            version = config.get_tool_version(tool) if is_available else "N/A"
            path = config.get_tool_path(tool) if is_available else "No encontrado"
            
            # Determinar acciones disponibles
            actions = "✅ OK" if is_available else ""
            if not is_available and installer and installer.is_tool_installable(tool):
                actions = "📦 Instalable"
                missing_tools.append(tool)
            elif not is_available:
                actions = "❌ No instalable"
            
            tools_table.add_row(tool.upper(), status, version, path, actions)
        
        self.console.print(tools_table)
        
        # Mostrar opciones de instalación si hay herramientas faltantes
        if missing_tools and installer:
            self.console.print()
            self.console.print(Panel(
                f"[bold yellow]📦 Herramientas faltantes detectadas: {len(missing_tools)}[/bold yellow]\n\n"
                "[dim]Opciones disponibles:[/dim]\n"
                "• [green]i[/green] - Instalar herramientas faltantes automáticamente\n"
                "• [cyan]s[/cyan] - Seleccionar herramientas específicas para instalar\n"
                "• [yellow]p[/yellow] - Verificar prerequisitos del sistema\n"
                "• [red]Enter[/red] - Volver al menú principal",
                title="🛠️ Instalación Automática",
                border_style="yellow"
            ))
            
            return missing_tools
        
        self.console.print()
        return []
    
    def show_configuration(self, config):
        """Muestra la configuración actual"""
        self.console.print(Panel(
            "[bold yellow]⚙️ CONFIGURACIÓN ACTUAL[/bold yellow]",
            border_style="yellow"
        ))
        
        config_table = Table(box=box.ROUNDED)
        config_table.add_column("Parámetro", style="cyan", min_width=20)
        config_table.add_column("Valor", style="white")
        config_table.add_column("Descripción", style="dim white")
        
        # Obtener configuración
        settings = [
            ("Timeout", str(config.get_setting('timeout', 30)), "Tiempo límite para operaciones"),
            ("Threads", str(config.get_setting('threads', 10)), "Número de hilos concurrentes"),
            ("Output Dir", config.get_setting('output_dir', './results'), "Directorio de resultados"),
            ("Verbose", str(config.get_setting('verbose', False)), "Modo verboso activado"),
            ("User Agent", config.get_setting('user_agent', 'Aegis/1.0'), "User-Agent para HTTP"),
        ]
        
        for param, value, desc in settings:
            config_table.add_row(param, value, desc)
        
        self.console.print(config_table)
        self.console.print()
    
    def show_live_progress(self, target: str, scan_type: str):
        """Muestra progreso en vivo durante el escaneo"""
        with Live(self._create_progress_layout(target, scan_type), console=self.console, refresh_per_second=10) as live:
            return live
    
    def _create_progress_layout(self, target: str, scan_type: str) -> Layout:
        """Crea el layout de progreso en tiempo real"""
        layout = Layout()
        
        header = Panel(
            f"[bold green]🔍 Escaneando:[/bold green] {target}\n"
            f"[bold cyan]Tipo:[/bold cyan] {scan_type}",
            title="[bold red]ESCANEO EN PROGRESO[/bold red]",
            border_style="green"
        )
        
        layout.update(header)
        return layout 